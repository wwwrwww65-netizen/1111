name: deploy_to_vps

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: deploy-main
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Ensure repo context
        uses: actions/checkout@v4

      - name: Deploy over SSH to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script_stop: true
          command_timeout: 30m
          script: |
            set -euo pipefail
            if [ ! -d /var/www/ecom ]; then
              echo "/var/www/ecom not found. Please clone repo to this path first." >&2
              exit 1
            fi

            cd /var/www/ecom
            git fetch --all --prune
            git reset --hard origin/main

            # Node & pnpm
            command -v corepack >/dev/null 2>&1 || (npm i -g corepack || true)
            corepack enable || true
            corepack prepare pnpm@9 --activate

            # pnpm config hardening for monorepo
            pnpm config set store-dir /var/www/ecom/.pnpm-store
            pnpm config set node-linker hoisted
            pnpm config set package-import-method copy

            # Install deps without running postinstall scripts to avoid native failures
            export npm_config_ignore_scripts=true
            export NPM_CONFIG_IGNORE_SCRIPTS=true
            export PUPPETEER_SKIP_DOWNLOAD=true
            export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
            CI=1 NODE_ENV=development pnpm install -w --frozen-lockfile=false --prod=false --force --ignore-scripts \
              --filter ./packages/db \
              --filter ./packages/api \
              --filter ./apps/web \
              --filter ./apps/admin | cat

            # Manually rebuild native deps as needed
            pnpm rebuild @prisma/client prisma esbuild puppeteer || true
            npx prisma --version || true

            # Build apps/packages (clean .next first)
            rm -rf apps/web/.next apps/admin/.next || true
            pnpm --filter @repo/db build | cat
            pnpm --filter @repo/api build | cat || true
            pnpm --filter web build | cat
            pnpm --filter admin build | cat
            # After build, if standalone exists for admin/web, adjust systemd to standalone entry
            if [ -f apps/admin/.next/standalone/apps/admin/server.js ]; then
              sed -i -E "s|^ExecStart=.*next start -p 3001|ExecStart=/usr/bin/node /var/www/ecom/apps/admin/.next/standalone/apps/admin/server.js|" /etc/systemd/system/ecom-admin.service || true
            fi
            if [ -f apps/web/.next/standalone/apps/web/server.js ]; then
              sed -i -E "s|^ExecStart=.*next start -p 3000|ExecStart=/usr/bin/node /var/www/ecom/apps/web/.next/standalone/apps/web/server.js|" /etc/systemd/system/ecom-web.service || true
            fi

            # Install/refresh systemd units
            install -m 0644 infra/systemd/ecom-api.service /etc/systemd/system/ecom-api.service
            install -m 0644 infra/systemd/ecom-web.service /etc/systemd/system/ecom-web.service
            install -m 0644 infra/systemd/ecom-admin.service /etc/systemd/system/ecom-admin.service
            systemctl daemon-reload

            # Restart services (ignore failure to keep pipeline moving)
            systemctl restart ecom-api || true
            systemctl restart ecom-web || true
            systemctl restart ecom-admin || true

            # Show listeners for quick diagnostics
            ss -ltnp | egrep ":3000|:3001|:4000" || true

            # Reload nginx if config is valid
            nginx -t && systemctl reload nginx || true
