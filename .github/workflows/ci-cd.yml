name: CI & Staging Deployment (pnpm / Turborepo)

on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - main

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_and_test:
    name: Build & Test (monorepo)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'        # ØºÙŠÙ‘Ø± Ø¥Ù„Ù‰ '18' Ù„Ùˆ README ÙŠØ·Ù„Ø¨ 18
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '8.6.10'         # Ø£Ùˆ '8' Ù„Ø£Ø®Ø° Ø¢Ø®Ø± Ø§Ù„ØªØµÙ„ÙŠØ­Ø§Øª

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: Install dependencies (workspace)
        run: pnpm install --frozen-lockfile

      - name: Lint (workspace)
        run: pnpm -w -s lint

      - name: Run tests (workspace)
        run: pnpm -w -s test

      - name: Build (workspace / turborepo-aware)
        run: pnpm -w -s build

      - name: Upload build artifacts (optional)
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/web/.next || true
            apps/mobile/.expo || true
            dist || ./**/dist || true

  deploy_staging:
    name: Deploy to Staging (SSH example)
    runs-on: ubuntu-latest
    needs: build_and_test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '8.6.10'

      - name: Install dependencies (workspace)
        run: pnpm install --frozen-lockfile

      - name: Build web for deploy (optional)
        run: pnpm -w --filter ./apps/web... build

      - name: Deploy to staging server via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_SSH_PORT || '22' }}
          script: |
            set -e
            echo "ðŸ”” Staging deploy - example actions below"
            # Ù…Ø«Ø§Ù„ Ø¥Ø°Ø§ ØªØ³ØªØ®Ø¯Ù… docker images:
            # docker pull ${{ secrets.DOCKER_REGISTRY }}/your-org/your-web-app:${{ github.sha }}
            # docker-compose -f /path/to/docker-compose.yml up -d --no-deps --build

            # Ù…Ø«Ø§Ù„ Ø¨Ø¯ÙŠÙ„: Ø§Ø³ØªØ¯Ø¹Ø§Ø¡ Ø³ÙƒØ±Ø¨Øª Ù†Ø´Ø± Ù…ÙˆØ¬ÙˆØ¯ Ø¹Ù„Ù‰ Ø§Ù„Ø®Ø§Ø¯Ù…
            # cd /var/www/myapp && ./deploy.sh ${{ github.sha }}

            echo "âœ… Deployment to staging finished (simulated)."

      - name: Notify (optional)
        if: success()
        run: echo "Staging deploy completed for commit ${{ github.sha }}"
