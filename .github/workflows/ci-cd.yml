# GitHub Actions: CI & Staging Deployment for pnpm/Turborepo Monorepo
#
# This workflow automates the process of testing, building, and deploying the application.
#
# It includes two main jobs:
# 1. build_and_test: Runs on every push and pull request to 'main' or 'feature/*' branches.
#    - Installs dependencies using pnpm.
#    - Runs linting, testing, and builds the entire monorepo via Turborepo.
# 2. deploy_staging: Runs ONLY on a push to the 'main' branch, after the 'build_and_test' job succeeds.
#    - Simulates a deployment to a staging environment.
#    - This is a placeholder and should be replaced with actual deployment commands.

name: CI & Staging Deployment

on:
  push:
    branches:
      - main
      - 'feature/**' # Also run on feature branches
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8 # Use major version to get latest patches

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Aligned with README
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm lint

      - name: Run tests
        run: pnpm test

      - name: Build project
        run: pnpm build

  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build_and_test # This job runs only after build_and_test succeeds
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only deploy on push to main

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project for deployment
        run: pnpm build

      - name: Deploy to Staging Environment
        run: |
          echo "ðŸš€ Deploying to staging server..."
          # In a real-world scenario, you would add your deployment script here.
          # For example, using SCP, rsync, or a cloud provider's CLI.
          #
          # Example using SCP:
          # scp -r ./apps/web/.next user@staging-server:/var/www/my-app
          #
          # IMPORTANT:
          # You must store sensitive information like SSH keys, API tokens, etc.,
          # in GitHub Secrets (Settings > Secrets and variables > Actions).
          #
          # secrets.STAGING_SSH_KEY
          # secrets.STAGING_SERVER_IP
          echo "âœ… Deployment to staging simulated successfully."
