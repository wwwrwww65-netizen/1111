name: CI/CD Pipeline

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]
  workflow_dispatch: {}

concurrency:
  group: "ci-cd-${{ github.ref }}"
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  id-token: write

env:
  NODE_VERSION: 20
  FLUTTER_VERSION: "stable"
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
  TERRAFORM_WORKSPACE: "staging"

jobs:
  test:
    name: Lint & Unit Tests (web + api)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store/v3
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Ensure pnpm is installed (corepack || npm fallback)
        run: |
          set -e
          echo "TRY: corepack enable && corepack prepare pnpm@10 --activate"
          corepack enable >/dev/null 2>&1 || true
          corepack prepare pnpm@10 --activate >/dev/null 2>&1 || true

          if ! command -v pnpm >/dev/null 2>&1; then
            echo "corepack didn't provide pnpm — installing pnpm via npm globally"
            npm i -g pnpm@10
          fi

          # ensure npm global bin is on PATH (defensive)
          NPM_GLOB_BIN="$(npm bin -g)"
          echo "npm global bin: $NPM_GLOB_BIN"
          if [ -d "$NPM_GLOB_BIN" ]; then
            export PATH="$NPM_GLOB_BIN:$PATH"
          fi
          hash -r || true
          echo "Final pnpm path: $(which pnpm || echo 'not-found')"
          pnpm -v

      - name: Debug node/npm/pnpm (important — paste output if any issue)
        run: |
          node -v
          npm -v
          echo "which pnpm: $(which pnpm || echo 'pnpm not found')"
          pnpm -v || true
          echo "PATH=$PATH"

      - name: Install deps & run tests
        run: |
          pnpm install --frozen-lockfile
          pnpm -w run lint || true
          pnpm -w run test -- --coverage

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage

  build_web:
    name: Build Web (Next.js)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store/v3
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Ensure pnpm is installed (corepack || npm fallback)
        run: |
          set -e
          corepack enable >/dev/null 2>&1 || true
          corepack prepare pnpm@10 --activate >/dev/null 2>&1 || true
          if ! command -v pnpm >/dev/null 2>&1; then
            npm i -g pnpm@10
          fi
          NPM_GLOB_BIN="$(npm bin -g)"
          if [ -d "$NPM_GLOB_BIN" ]; then
            export PATH="$NPM_GLOB_BIN:$PATH"
          fi
          hash -r || true
          which pnpm || true
          pnpm -v

      - name: Install & Build web
        run: |
          pnpm install --frozen-lockfile
          pnpm --filter ./apps/web build

      - name: Upload web build (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: apps/web/.next

  # باقي الـ jobs (build_api, build_android, build_ios, deploy_staging) — أعد استخدامها كما في نسختك السابقة،
  # إذا أي منها يحتاج pnpm أضف نفس خطوة "Ensure pnpm is installed" قبل أي استدعاء pnpm.
