name: CI / CD (pnpm & Turborepo)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

# Cancel any in-progress runs on the same branch.
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

# Define permissions for the workflow, including security event writing.
permissions:
  contents: read
  actions: read
  security-events: write

# Define global environment variables for all jobs.
env:
  NODE_VERSION: '20'
  NEXT_DISABLE_ESLINT: '1'
  NEXT_TELEMETRY_DISABLED: '1'
  PNPM_CONFIG_STORE_DIR: ${{ github.workspace }}/.pnpm-store
  # Test-only defaults; DB will be provided by services
  NEXT_PUBLIC_APP_URL: 'http://localhost:3000'
  NEXT_PUBLIC_TRPC_URL: 'http://localhost:4000/trpc'
  JWT_SECRET: 'test_secret_for_ci_only'
  STRIPE_SECRET_KEY: 'sk_test_1234567890'
  SMTP_HOST: 'localhost'
  SMTP_PORT: '1025'
  SMTP_USER: ''
  SMTP_PASS: ''

jobs:
  light_ci:
    name: CI (light, self-hosted)
    if: github.event_name == 'workflow_dispatch'
    runs-on: [self-hosted, linux, x64, jeeey]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Enable corepack & pnpm
        run: |
          corepack enable || true
          corepack prepare pnpm@8.6.10 --activate || true
      - name: Configure pnpm store dir (project)
        run: pnpm config set store-dir "$PNPM_CONFIG_STORE_DIR" --location project
      - name: Ensure pnpm store dir exists
        run: mkdir -p "$PNPM_CONFIG_STORE_DIR"
      - name: Install deps (no frozen)
        run: pnpm install --no-frozen-lockfile --store-dir="$PNPM_CONFIG_STORE_DIR"
      - name: Build Web/Admin/API
        run: |
          pnpm --filter @repo/db build
          pnpm --filter web build
          pnpm --filter admin build
          pnpm --filter @repo/api build

  build_and_test:
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    name: Build / Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: public.ecr.aws/docker/library/postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: ecom_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U user -d ecom_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for analysis tools

      - name: Ensure pnpm cache dir (~/.pnpm-store) exists
        run: mkdir -p "$HOME/.pnpm-store"

      - name: Enable corepack
        run: corepack enable
      - name: Use pnpm 8.6.10
        run: corepack prepare pnpm@8.6.10 --activate
      - name: Configure pnpm store dir (project)
        run: pnpm config set store-dir "$PNPM_CONFIG_STORE_DIR" --location project
      - name: Ensure pnpm store dir exists
        run: mkdir -p "$PNPM_CONFIG_STORE_DIR"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: ''

      - name: Install dependencies
        run: |
          pnpm config set store-dir "$PNPM_CONFIG_STORE_DIR"
          pnpm config set node-linker hoisted
          pnpm config set package-import-method copy
          pnpm install --no-frozen-lockfile --ignore-scripts --store-dir="$PNPM_CONFIG_STORE_DIR"

      - name: Load prod-like env from repo Variables/Secrets (main only)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "COOKIE_DOMAIN=${{ vars.COOKIE_DOMAIN || secrets.COOKIE_DOMAIN }}" >> $GITHUB_ENV
          echo "CORS_ALLOW_ORIGINS=${{ vars.CORS_ALLOW_ORIGINS || secrets.CORS_ALLOW_ORIGINS }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_ADMIN_URL=${{ vars.NEXT_PUBLIC_ADMIN_URL || secrets.NEXT_PUBLIC_ADMIN_URL }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_APP_URL=${{ vars.NEXT_PUBLIC_APP_URL || secrets.NEXT_PUBLIC_APP_URL }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_API_BASE_URL=${{ vars.NEXT_PUBLIC_API_BASE_URL || secrets.NEXT_PUBLIC_API_BASE_URL }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_TRPC_URL=${{ vars.NEXT_PUBLIC_TRPC_URL || secrets.NEXT_PUBLIC_TRPC_URL }}" >> $GITHUB_ENV
          echo "EXPO_PUBLIC_TRPC_URL=${{ vars.EXPO_PUBLIC_TRPC_URL || secrets.EXPO_PUBLIC_TRPC_URL }}" >> $GITHUB_ENV
          echo "EXPO_PUBLIC_API_BASE_URL=${{ vars.EXPO_PUBLIC_API_BASE_URL || secrets.EXPO_PUBLIC_API_BASE_URL }}" >> $GITHUB_ENV
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "MAINTENANCE_SECRET=${{ secrets.MAINTENANCE_SECRET }}" >> $GITHUB_ENV

      - name: Set DATABASE URLs (prefer local CI service)
        run: |
          echo "DATABASE_URL=${{ vars.CI_DB_URL || secrets.CI_DB_URL || 'postgresql://user:password@localhost:5432/ecom_db?schema=public' }}" >> $GITHUB_ENV
          echo "DIRECT_URL=${{ vars.CI_DB_URL || secrets.CI_DB_URL || 'postgresql://user:password@localhost:5432/ecom_db?schema=public' }}" >> $GITHUB_ENV
          echo "CLOUDINARY_URL=${{ secrets.CLOUDINARY_URL }}" >> $GITHUB_ENV

      - name: Reset CI database schema (ephemeral)
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          sudo apt-get update -y && sudo apt-get install -y postgresql-client || true
          PGURI="$DATABASE_URL"; [[ "$PGURI" == *\?* ]] && PGURI="${PGURI%%\?*}"
          echo "Resetting schema 'public' on CI DB..."
          # Proactively drop any conflicting index that previous runs or manual SQL might have created
          psql "$PGURI" -v ON_ERROR_STOP=1 -c 'DO $$ BEGIN IF EXISTS (SELECT 1 FROM pg_class WHERE relname = ''Category_slug_key'') THEN EXECUTE ''DROP INDEX IF EXISTS "Category_slug_key"''; END IF; END $$;' || true
          psql "$PGURI" -v ON_ERROR_STOP=1 -c 'DROP SCHEMA IF EXISTS public CASCADE; CREATE SCHEMA public;'

      - name: (Optional) Mirror production DB into CI Postgres
        if: github.ref == 'refs/heads/main'
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_PORT: ${{ secrets.VPS_PORT }}
          VPS_USER: ${{ secrets.VPS_USER }}
          PROD_DB_USER: ${{ secrets.PROD_DB_USER }}
          PROD_DB_PASS: ${{ secrets.PROD_DB_PASS }}
          PROD_DB_NAME: ${{ secrets.PROD_DB_NAME }}
          CLONE_PROD_DB: ${{ vars.CLONE_PROD_DB }}
        run: |
          if [ "${CLONE_PROD_DB}" != "1" ]; then echo "Skip prod DB clone (CLONE_PROD_DB!=1)"; exit 0; fi
          # Validate required secrets before attempting SSH
          if [ -z "${SSH_PRIVATE_KEY}" ] || [ -z "${VPS_HOST}" ] || [ -z "${VPS_USER}" ] || [ -z "${PROD_DB_USER}" ] || [ -z "${PROD_DB_PASS}" ] || [ -z "${PROD_DB_NAME}" ]; then
            echo "Skip prod DB clone (incomplete secrets)"; exit 0;
          fi
          sudo apt-get update -y && sudo apt-get install -y postgresql-client openssh-client
          mkdir -p ~/.ssh
          # Normalize private key (handle \n-escaped, base64, CRLF)
          KEY_CONTENT="${SSH_PRIVATE_KEY}"
          if printf '%s' "${KEY_CONTENT}" | grep -q '\\n'; then
            KEY_CONTENT=$(printf '%s' "${KEY_CONTENT}" | sed 's/\\r//g; s/\\n/\n/g')
          fi
          if ! printf '%s' "${KEY_CONTENT}" | grep -q 'BEGIN'; then
            # try base64 decode if secret provided in base64
            DECODED=$(printf '%s' "${SSH_PRIVATE_KEY}" | base64 -d 2>/dev/null || true)
            if printf '%s' "${DECODED}" | grep -q 'BEGIN'; then KEY_CONTENT="${DECODED}"; fi
          fi
          printf '%s' "${KEY_CONTENT}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)" >/dev/null 2>&1
          ssh-add ~/.ssh/id_rsa >/dev/null 2>&1 || true
          ssh -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -o ConnectTimeout=15 -i ~/.ssh/id_rsa -p "${VPS_PORT:-22}" ${VPS_USER:-root}@${VPS_HOST} \
            "PGPASSWORD='${PROD_DB_PASS}' pg_dump -U '${PROD_DB_USER}' -h 127.0.0.1 -p 5432 -d '${PROD_DB_NAME}' --no-owner --no-privileges" > prod.sql || {
              echo "Skip prod DB clone (SSH/pg_dump failed)"; exit 0;
            }
          echo "Reset target schema";
          PGPASSWORD=password psql -U user -h localhost -p 5432 -d ecom_db -v ON_ERROR_STOP=1 -c "DROP SCHEMA IF EXISTS public CASCADE; CREATE SCHEMA public;"
          echo "Restore plain SQL dump";
          awk '!/^SET / && $0 !~ /pg_catalog.set_config/' prod.sql > prod.filtered.sql
          sed -i '/transaction_timeout/d;/idle_session_timeout/d;/idle_in_transaction_session_timeout/d' prod.filtered.sql
          PGPASSWORD=password psql -U user -h localhost -p 5432 -d ecom_db -v ON_ERROR_STOP=1 < prod.filtered.sql

      # Single authoritative prisma db push for CI (after hard reset)
      - name: Prisma db push (ensure schema for tests)
        env:
          CLONE_PROD_DB: ${{ vars.CLONE_PROD_DB }}
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "${CLONE_PROD_DB}" = "1" ]; then
            echo "Skip db:push (prod DB mirrored)"; exit 0;
          fi
          pnpm --filter @repo/db db:push:force
          pnpm --filter @repo/db db:migrate
          if [ -n "${{ secrets.PROD_DB_SCHEMA_SQL }}" ]; then
            echo "Apply PROD_DB_SCHEMA_SQL supplement"
            sudo apt-get update -y && sudo apt-get install -y postgresql-client || true
            PGURI="$DATABASE_URL"; [[ "$PGURI" == *\?* ]] && PGURI="${PGURI%%\?*}"
            echo "${{ secrets.PROD_DB_SCHEMA_SQL }}" | psql "$PGURI" -v ON_ERROR_STOP=1 || true
          fi

      - name: Prisma seed
        if: github.ref == 'refs/heads/main'
        env:
          CLONE_PROD_DB: ${{ vars.CLONE_PROD_DB }}
        run: |
          if [ "${CLONE_PROD_DB}" = "1" ]; then echo "Skip seed (prod DB mirrored)"; exit 0; fi
          pnpm --filter @repo/db db:seed
      - name: Admin-only seed (ensure admin fixtures)
        if: github.ref == 'refs/heads/main'
        env:
          CLONE_PROD_DB: ${{ vars.CLONE_PROD_DB }}
        run: |
          if [ "${CLONE_PROD_DB}" = "1" ]; then echo "Skip admin-only seed (prod DB mirrored)"; exit 0; fi
          pnpm --filter @repo/db db:seed:admin-only

      - name: Build API
        run: pnpm --filter @repo/api build

      - name: Build Web (skip lint/types)
        run: pnpm --filter web build

      - name: Build Admin (skip lint/types)
        run: pnpm --filter admin build

      - name: Lint (non-blocking)
        run: pnpm lint || true

      - name: Security scan (npm audit)
        run: npm audit --audit-level=high || true

      - name: Upload Web artifact (.next standalone)
        uses: actions/upload-artifact@v4
        with:
          name: web-standalone
          path: apps/web/.next/standalone
          if-no-files-found: warn

      - name: Upload Admin artifact (.next standalone)
        uses: actions/upload-artifact@v4
        with:
          name: admin-standalone
          path: apps/admin/.next/standalone
          if-no-files-found: warn

      - name: Upload API dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-dist
          path: packages/api/dist
          if-no-files-found: warn

      - name: Run UI tests
        run: pnpm --filter @repo/ui test -- --ci --reporters=default --reporters=summary



      - name: Run API tests
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DIRECT_URL: ${{ env.DIRECT_URL }}
        run: pnpm --filter @repo/api test -- --ci --reporters=default --reporters=summary

      - name: E2E admin check (smoke)
        run: bash scripts/ci/e2e-admin-check.sh

      - name: Admin console smoke (no client errors)
        env:
          PORT: '3001'
          NEXT_PUBLIC_TRPC_URL: 'http://localhost:4000/trpc'
          NEXT_PUBLIC_API_BASE_URL: 'http://localhost:4000'
        run: |
          set -e
          echo "--- Rebuild admin with local API env ---"
          (cd apps/admin && NEXT_PUBLIC_TRPC_URL="$NEXT_PUBLIC_TRPC_URL" NEXT_PUBLIC_API_BASE_URL="$NEXT_PUBLIC_API_BASE_URL" pnpm build)
          echo "--- Start admin standalone on :$PORT ---"
          node apps/admin/.next/standalone/apps/admin/server.js & echo $! > /tmp/admin.pid
          for i in $(seq 1 40); do
            code=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:$PORT/ || true)
            [ "$code" = "200" ] && break; sleep 1;
          done
          node scripts/ci/admin-console-smoke.mjs
          kill -9 $(cat /tmp/admin.pid) 2>/dev/null || true
      - name: Start API (background)
        run: |
          set -e
          node packages/api/dist/index.js & echo $! > /tmp/api.pid
          for i in $(seq 1 40); do
            code=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:4000/health || true)
            [ "$code" = "200" ] && break; sleep 1;
          done
          curl -s -o /dev/null -w '%{http_code}' http://localhost:4000/health | grep -q 200

      - name: API login smoke (local)
        run: |
      - name: Analyze endpoint smoke (local)
        env:
          API_BASE: 'http://localhost:4000'
        run: |
          set -e
          node scripts/ci/smoke-analyze.mjs
          set -e
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:4000/api/admin/auth/login -H 'content-type: application/json' --data '{"email":"admin@example.com","password":"admin123","remember":true}') || true
          if [ "$STATUS" != "200" ]; then echo "Login smoke failed with status $STATUS"; exit 1; fi
      - name: Admin extras smoke (currencies/zones/rates/analytics)
        env:
          API_BASE: 'http://localhost:4000'
        run: |
          set -e
          node scripts/ci/smoke-admin-extras.mjs
      - name: Categories CRUD smoke
        env:
          API_BASE: 'http://localhost:4000'
        run: |
          set -e
          node scripts/ci/smoke-categories.mjs
      - name: E2E flow (logistics→finance→notifications)
        env:
          API_BASE: 'http://localhost:4000'
        run: |
          set -e
          node scripts/ci/e2e-flow.mjs

      - name: Speed smoke (products fast, product CRUD fast, category delete fast)
        env:
          API_BASE: 'http://localhost:4000'
          SPEED_MAX_MS_PRODUCTS: '1500'
          SPEED_MAX_MS_CREATE: '2500'
          SPEED_MAX_MS_DELETE: '2500'
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        run: |
          set -e
          node scripts/ci/smoke-speed.mjs

      - name: Categories CRUD smoke
        env:
          API_BASE: 'http://localhost:4000'
        run: |
          set -e
          node scripts/ci/smoke-categories.mjs

      - name: Stop API (background)
        if: always()
        run: |
          kill -9 $(cat /tmp/api.pid) 2>/dev/null || true

  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build_and_test # This job runs only after build_and_test succeeds
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only deploy on push to main

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure pnpm cache dir (~/.pnpm-store) exists
        run: mkdir -p "$HOME/.pnpm-store"

      - name: Enable corepack
        run: corepack enable
      - name: Use pnpm 8.6.10
        run: corepack prepare pnpm@8.6.10 --activate
      - name: Configure pnpm store dir (project)
        run: pnpm config set store-dir "$PNPM_CONFIG_STORE_DIR" --location project
      - name: Ensure pnpm store dir exists
        run: mkdir -p "$PNPM_CONFIG_STORE_DIR"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: ''

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile --store-dir="$PNPM_CONFIG_STORE_DIR"

      - name: Build project for deployment
        # This build is redundant if artifacts were used, but is kept for simplicity.
        # For optimization, upload artifacts in the 'build_and_test' job
        # and download them here.
        run: pnpm build

      - name: Deploy to Staging Environment
        run: |
          echo "🚀 Deploy step placeholder (configure your deployment here)."
