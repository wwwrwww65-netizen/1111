  # GitHub Actions: CI & Staging Deployment for pnpm/Turborepo Monorepo
#
# This workflow merges the advanced CI setup from the main branch
# with the requested staging deployment functionality.
# It automatically uses the pnpm version defined in package.json.

name: CI / CD (pnpm & Turborepo)

on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - main

# Cancel any in-progress runs on the same branch.
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

# Define permissions for the workflow, including security event writing.
permissions:
  contents: read
  actions: read
  security-events: write

# Define global environment variables for all jobs.
env:
  NODE_VERSION: '20'

jobs:
  build_and_test:
    name: Build / Lint / Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for analysis tools

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        # The version is read automatically from the package.json's "packageManager" field.

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm lint

      - name: Run tests
        run: pnpm test

      - name: Build project
        run: pnpm build

  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build_and_test # This job runs only after build_and_test succeeds
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only deploy on push to main

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        # The version is read automatically from the package.json's "packageManager" field.

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project for deployment
        # This build is redundant if artifacts were used, but is kept for simplicity.
        # For optimization, upload artifacts in the 'build_and_test' job
        # and download them here.
        run: pnpm build

      - name: Deploy to Staging Environment
        run: |
          echo "ðŸš€ Deploying to staging server..."
          # In a real-world scenario, you would add your deployment script here.
          # Example using SCP, rsync, or a cloud provider's CLI.
          #
          # IMPORTANT:
          # You must store sensitive information like SSH keys, API tokens, etc.,
          # in GitHub Secrets (Settings > Secrets and variables > Actions).
          #
          # Example:
          # echo "${{ secrets.STAGING_SSH_KEY }}" > key.pem
          # chmod 600 key.pem
          # scp -i key.pem -r ./apps/web/.next user@${{ secrets.STAGING_SERVER_IP }}:/var/www/my-app
          echo "âœ… Deployment to staging simulated successfully."
