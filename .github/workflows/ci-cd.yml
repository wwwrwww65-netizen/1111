name: CI / CD (pnpm & Turborepo)

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main
  workflow_dispatch:

# Cancel any in-progress runs on the same branch.
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

# Define permissions for the workflow, including security event writing.
permissions:
  contents: read
  actions: read
  security-events: write

# Define global environment variables for all jobs.
env:
  NODE_VERSION: '20'
  NEXT_DISABLE_ESLINT: '1'
  NEXT_TELEMETRY_DISABLED: '1'
  PNPM_CONFIG_STORE_DIR: ${{ github.workspace }}/.pnpm-store
  # Test-only defaults; DB will be provided by services
  NEXT_PUBLIC_APP_URL: 'http://localhost:3000'
  NEXT_PUBLIC_TRPC_URL: 'http://localhost:4000/trpc'
  JWT_SECRET: 'test_secret_for_ci_only'
  STRIPE_SECRET_KEY: 'sk_test_1234567890'
  SMTP_HOST: 'localhost'
  SMTP_PORT: '1025'
  SMTP_USER: ''
  SMTP_PASS: ''

jobs:
  light_ci:
    name: CI (light, self-hosted)
    runs-on: [self-hosted, linux, x64, jeeey]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Enable corepack & pnpm
        run: |
          corepack enable || true
          corepack prepare pnpm@8.6.10 --activate || true
      - name: Configure pnpm store dir (project)
        run: pnpm config set store-dir "$PNPM_CONFIG_STORE_DIR" --location project
      - name: Ensure pnpm store dir exists
        run: mkdir -p "$PNPM_CONFIG_STORE_DIR"
      - name: Install deps (no frozen)
        run: pnpm install --no-frozen-lockfile --store-dir="$PNPM_CONFIG_STORE_DIR"
      - name: Build Web/Admin/API
        run: |
          pnpm --filter @repo/db build
          pnpm --filter web build
          pnpm --filter admin build
          pnpm --filter @repo/api build

  build_and_test:
    if: github.event_name == 'pull_request'
    name: Build / Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: ecom_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U user -d ecom_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for analysis tools

      - name: Ensure pnpm cache dir (~/.pnpm-store) exists
        run: mkdir -p "$HOME/.pnpm-store"

      - name: Enable corepack
        run: corepack enable
      - name: Use pnpm 8.6.10
        run: corepack prepare pnpm@8.6.10 --activate
      - name: Configure pnpm store dir (project)
        run: pnpm config set store-dir "$PNPM_CONFIG_STORE_DIR" --location project
      - name: Ensure pnpm store dir exists
        run: mkdir -p "$PNPM_CONFIG_STORE_DIR"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: ''

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile --store-dir="$PNPM_CONFIG_STORE_DIR"

      - name: Set DATABASE URLs
        run: |
          echo "DATABASE_URL=postgresql://user:password@localhost:5432/ecom_db?schema=public" >> $GITHUB_ENV
          echo "DIRECT_URL=postgresql://user:password@localhost:5432/ecom_db?schema=public" >> $GITHUB_ENV
          echo "CLOUDINARY_URL=${{ secrets.CLOUDINARY_URL }}" >> $GITHUB_ENV

      - name: Prisma push schema (non-destructive)
        run: pnpm --filter @repo/db db:push

      - name: Prisma seed
        run: pnpm --filter @repo/db db:seed

      - name: Build API
        run: pnpm --filter @repo/api build

      - name: Build Web (skip lint/types)
        run: pnpm --filter web build

      - name: Build Admin (skip lint/types)
        run: pnpm --filter admin build

      - name: Lint (non-blocking)
        run: pnpm lint || true

      - name: Security scan (npm audit)
        run: npm audit --audit-level=high || true

      - name: Upload Web artifact (.next standalone)
        uses: actions/upload-artifact@v4
        with:
          name: web-standalone
          path: apps/web/.next/standalone
          if-no-files-found: warn

      - name: Upload Admin artifact (.next standalone)
        uses: actions/upload-artifact@v4
        with:
          name: admin-standalone
          path: apps/admin/.next/standalone
          if-no-files-found: warn

      - name: Upload API dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-dist
          path: packages/api/dist
          if-no-files-found: warn

      - name: Run UI tests
        run: pnpm --filter @repo/ui test -- --ci --reporters=default --reporters=summary

      - name: Run API tests
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DIRECT_URL: ${{ env.DIRECT_URL }}
        run: pnpm --filter @repo/api test -- --ci --reporters=default --reporters=summary

      - name: E2E admin check (smoke)
        run: bash scripts/ci/e2e-admin-check.sh

  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build_and_test # This job runs only after build_and_test succeeds
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only deploy on push to main

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure pnpm cache dir (~/.pnpm-store) exists
        run: mkdir -p "$HOME/.pnpm-store"

      - name: Enable corepack
        run: corepack enable
      - name: Use pnpm 8.6.10
        run: corepack prepare pnpm@8.6.10 --activate
      - name: Configure pnpm store dir (project)
        run: pnpm config set store-dir "$PNPM_CONFIG_STORE_DIR" --location project
      - name: Ensure pnpm store dir exists
        run: mkdir -p "$PNPM_CONFIG_STORE_DIR"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: ''

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile --store-dir="$PNPM_CONFIG_STORE_DIR"

      - name: Build project for deployment
        # This build is redundant if artifacts were used, but is kept for simplicity.
        # For optimization, upload artifacts in the 'build_and_test' job
        # and download them here.
        run: pnpm build

      - name: Deploy to Staging Environment
        run: |
          echo "ðŸš€ Deploy step placeholder (configure your deployment here)."
