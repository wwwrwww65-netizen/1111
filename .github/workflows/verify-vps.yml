name: Verify and Manage VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      restart_services:
        description: "Restart ecom services"
        required: false
        type: boolean
        default: false
      run_migrations:
        description: "Run Prisma migrate deploy"
        required: false
        type: boolean
        default: false

jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          set -e
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H srv995016.hstgr.cloud >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Verify services and health
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no root@srv995016.hstgr.cloud bash -s <<'REMOTE'
          set -e
          for s in ecom-api ecom-admin ecom-web; do
            if systemctl is-active --quiet "$s"; then
              echo "$s: active"
            else
              echo "$s: not active"
              journalctl -u "$s" -n 120 --no-pager || true
            fi
          done
          curl -fsS http://127.0.0.1:4000/health || true
          nginx -t && systemctl reload nginx || true
          REMOTE

      - name: Run Prisma migrations
        if: inputs.run_migrations == true || github.event_name == 'push'
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no root@srv995016.hstgr.cloud bash -s <<'REMOTE'
          set -e
          cd /var/www/ecom/packages/db
          # Load env
          set -a; . /var/www/ecom/.env.api; set +a
          # Extract DB credentials from DATABASE_URL and ensure Postgres user password matches .env
          parse() {
            node -e '
              const url = process.env.DATABASE_URL || "";
              try {
                const u = new URL(url);
                const out = {
                  user: decodeURIComponent(u.username),
                  password: decodeURIComponent(u.password),
                  host: u.hostname || "127.0.0.1",
                  port: u.port || "5432",
                  db: u.pathname.replace(/^\//, "") || "postgres",
                };
                console.log(JSON.stringify(out));
              } catch (e) { console.error("Bad DATABASE_URL"); process.exit(2); }
            '
          }
          CREDS=$(parse)
          DB_USER=$(echo "$CREDS" | node -e 'process.stdin.on("data",d=>{const j=JSON.parse(d);process.stdout.write(j.user)})')
          DB_PASS=$(echo "$CREDS" | node -e 'process.stdin.on("data",d=>{const j=JSON.parse(d);process.stdout.write(j.password)})')
          DB_NAME=$(echo "$CREDS" | node -e 'process.stdin.on("data",d=>{const j=JSON.parse(d);process.stdout.write(j.db)})')
          # Test connection with decoded password; if fails, align Postgres user password to env
          if ! PGPASSWORD="$DB_PASS" psql -h 127.0.0.1 -p 5432 -U "$DB_USER" -d "$DB_NAME" -c 'select 1' >/dev/null 2>&1; then
            echo "Syncing Postgres password for user $DB_USER to match .env.api"
            ESC_PW=$(printf '%s' "$DB_PASS" | sed "s/'/''/g")
            sudo -u postgres psql -v ON_ERROR_STOP=1 -c "ALTER USER \"$DB_USER\" WITH PASSWORD '$ESC_PW';"
          fi
          npx -y prisma migrate deploy
          REMOTE

      - name: Restart services
        if: inputs.restart_services == true || github.event_name == 'push'
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no root@srv995016.hstgr.cloud bash -s <<'REMOTE'
          set -e
          for s in ecom-api ecom-admin ecom-web; do systemctl restart "$s"; done
          sleep 2
          for s in ecom-api ecom-admin ecom-web; do
            if systemctl is-active --quiet "$s"; then
              echo "$s: active"
            else
              echo "$s: not active"
              journalctl -u "$s" -n 120 --no-pager || true
            fi
          done
          REMOTE

      - name: Collect service logs and health
        if: always()
        run: |
          set -e
          mkdir -p logs
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no root@srv995016.hstgr.cloud bash -s <<'REMOTE' | tee logs/ecom-api.log
          journalctl -u ecom-api -n 300 --no-pager || true
          REMOTE
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no root@srv995016.hstgr.cloud bash -s <<'REMOTE' | tee logs/ecom-admin.log
          journalctl -u ecom-admin -n 300 --no-pager || true
          REMOTE
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no root@srv995016.hstgr.cloud bash -s <<'REMOTE' | tee logs/ecom-web.log
          journalctl -u ecom-web -n 300 --no-pager || true
          REMOTE
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no root@srv995016.hstgr.cloud bash -s <<'REMOTE' | tee logs/nginx-test.txt
          nginx -t || true
          REMOTE
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no root@srv995016.hstgr.cloud bash -s <<'REMOTE' | tee logs/api-health.txt
          curl -fsS http://127.0.0.1:4000/health || true
          REMOTE

      - name: Upload logs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vps-logs
          path: logs/
          if-no-files-found: warn

