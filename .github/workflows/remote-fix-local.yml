name: Remote Fix (Local on Runner)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  fix_local:
    name: Fix & Diagnose (Local)
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Write .env files on VPS from secrets
        run: |
          set -euo pipefail
          sudo install -d -m 755 /var/www/ecom/packages/api /var/www/ecom/apps/admin /var/www/ecom/apps/web

          sudo tee /var/www/ecom/packages/api/.env >/dev/null <<'EOF'
          DATABASE_URL=${{ secrets.API_DATABASE_URL }}
          JWT_SECRET=${{ secrets.API_JWT_SECRET }}
          COOKIE_DOMAIN=${{ secrets.API_COOKIE_DOMAIN }}
          CORS_ALLOW_ORIGINS=${{ secrets.API_CORS_ALLOW_ORIGINS }}
          NEXT_PUBLIC_ADMIN_URL=${{ secrets.API_NEXT_PUBLIC_ADMIN_URL }}
          NEXT_PUBLIC_APP_URL=${{ secrets.API_NEXT_PUBLIC_APP_URL }}
          MAINTENANCE_SECRET=${{ secrets.API_MAINTENANCE_SECRET }}
          EOF

          sudo tee /var/www/ecom/apps/admin/.env >/dev/null <<'EOF'
          NEXT_PUBLIC_API_BASE_URL=${{ secrets.ADMIN_NEXT_PUBLIC_API_BASE_URL }}
          NEXT_PUBLIC_APP_URL=${{ secrets.ADMIN_NEXT_PUBLIC_APP_URL }}
          EOF

          sudo tee /var/www/ecom/apps/web/.env >/dev/null <<'EOF'
          NEXT_PUBLIC_API_BASE_URL=${{ secrets.WEB_NEXT_PUBLIC_API_BASE_URL }}
          NEXT_PUBLIC_APP_URL=${{ secrets.WEB_NEXT_PUBLIC_APP_URL }}
          EOF

          echo "[env] wrote API/Admin/Web env files"

      - name: Ensure admin RBAC and admin account
        env:
          MAINT_SECRET: ${{ secrets.API_MAINTENANCE_SECRET }}
        run: |
          set -euo pipefail
          echo "--- ensure RBAC ---"
          curl -fsS -X POST -H "X-Maintenance-Secret: $MAINT_SECRET" \
            https://api.jeeey.com/api/admin/maintenance/ensure-rbac | cat || true
          echo "--- fix auth columns ---"
          curl -fsS -X POST -H "X-Maintenance-Secret: $MAINT_SECRET" \
            https://api.jeeey.com/api/admin/maintenance/fix-auth-columns | cat || true
          echo "--- create admin ---"
          curl -fsS -X POST -H "Content-Type: application/json" -H "X-Maintenance-Secret: $MAINT_SECRET" \
            https://api.jeeey.com/api/admin/maintenance/create-admin \
            --data '{"email":"admin@example.com","password":"admin123","name":"Admin"}' | cat || true

      - name: Sync code to /var/www/ecom and rebuild Admin
        run: |
          set -euo pipefail
          SRC="$GITHUB_WORKSPACE"
          DEST="/var/www/ecom"
          sudo install -d -m 755 "$DEST"
          sudo rsync -a --delete --exclude .git --exclude "**/node_modules" "$SRC/" "$DEST/"
          if command -v corepack >/dev/null 2>&1; then corepack enable || true; corepack prepare pnpm@9 --activate || true; fi
          command -v pnpm >/dev/null 2>&1 || sudo npm i -g pnpm@9 || true
          PNPM_STORE="$DEST/.pnpm-store"
          ( cd "$DEST" && pnpm config set store-dir "$PNPM_STORE" --location project || true )
          # Clean build cache
          sudo rm -rf "$DEST/apps/admin/.next" || true
          ( cd "$DEST" && pnpm install --force --no-frozen-lockfile --store-dir "$PNPM_STORE" )
          ( cd "$DEST" && pnpm --filter admin build )
          pm2 restart ecom-admin --update-env || pm2 start /etc/pm2.ecosystem.config.js --only ecom-admin --update-env || true
          pm2 save || true

      - name: DNS sanity for admin/api (A/AAAA via public resolvers)
        run: |
          set -euo pipefail
          for host in admin.jeeey.com api.jeeey.com; do
            echo "=== $host ==="
            echo "@local A:"; dig +short "$host" A | cat || true
            echo "@local AAAA:"; dig +short "$host" AAAA | cat || true
            echo "@1.1.1.1 A:"; dig +short @1.1.1.1 "$host" A | cat || true
            echo "@1.1.1.1 AAAA:"; dig +short @1.1.1.1 "$host" AAAA | cat || true
            echo "@8.8.8.8 A:"; dig +short @8.8.8.8 "$host" A | cat || true
            echo "@8.8.8.8 AAAA:"; dig +short @8.8.8.8 "$host" AAAA | cat || true
          done

      - name: Enforce UFW (80/443/22) and harden SSH
        run: |
          set -euo pipefail
          # UFW rules
          sudo ufw allow OpenSSH || true
          sudo ufw allow 80/tcp || true
          sudo ufw allow 443/tcp || true
          sudo ufw --force enable || true
          sudo ufw status verbose | sed -n '1,120p' | cat
          # SSH hardening (keys only)
          SSHD="/etc/ssh/sshd_config"
          sudo cp -a "$SSHD" "$SSHD.bak.$(date +%s)" || true
          if grep -qE "^\s*PasswordAuthentication" "$SSHD"; then
            sudo sed -i "s/^#\?PasswordAuthentication.*/PasswordAuthentication no/" "$SSHD"
          else
            echo "PasswordAuthentication no" | sudo tee -a "$SSHD" >/dev/null
          fi
          if grep -qE "^\s*PubkeyAuthentication" "$SSHD"; then
            sudo sed -i "s/^#\?PubkeyAuthentication.*/PubkeyAuthentication yes/" "$SSHD"
          else
            echo "PubkeyAuthentication yes" | sudo tee -a "$SSHD" >/dev/null
          fi
          if grep -qE "^\s*PermitRootLogin" "$SSHD"; then
            sudo sed -i "s/^#\?PermitRootLogin.*/PermitRootLogin prohibit-password/" "$SSHD"
          else
            echo "PermitRootLogin prohibit-password" | sudo tee -a "$SSHD" >/dev/null
          fi
          sudo systemctl reload sshd || sudo systemctl restart sshd
          echo "--- Listening ports (22/80/443) ---" && ss -ltnp | egrep ":22 |:80 |:443 " | cat || true

      - name: Enable temporary SSH password for cursor (support session)
        run: |
          set -euo pipefail
          TMP_PASS="TempPass#947"
          echo "[ssh] enabling PasswordAuthentication and setting cursor password"
          sudo sed -i "s/^#\?PasswordAuthentication .*/PasswordAuthentication yes/" /etc/ssh/sshd_config
          echo "cursor:${TMP_PASS}" | sudo chpasswd
          sudo systemctl reload sshd || sudo systemctl restart sshd
          echo "[ssh] You can connect: ssh -p 22 cursor@72.60.92.17 (password: ${TMP_PASS})"
      - name: Run fix-admin locally (no SSH)
        env:
          CERTBOT_EMAIL: ${{ secrets.OPTIONAL_CERTBOT_EMAIL }}
          COOKIE_DOMAIN: .jeeey.com
        run: |
          set -euo pipefail
          cat > /tmp/.fix-admin.sh <<'EOF'
          #!/usr/bin/env bash
          set -euo pipefail

          PROJECT_DIR="${PROJECT_DIR:-/var/www/ecom}"
          DOMAIN_WEB="${DOMAIN_WEB:-jeeey.com}"
          DOMAIN_ADMIN="${DOMAIN_ADMIN:-admin.jeeey.com}"
          DOMAIN_API="${DOMAIN_API:-api.jeeey.com}"
          CERTBOT_EMAIL="${CERTBOT_EMAIL:-}"
          ENABLE_CERTBOT="${ENABLE_CERTBOT:-1}"
          COOKIE_DOMAIN="${COOKIE_DOMAIN:-.jeeey.com}"
          WEBROOT_DIR="${WEBROOT_DIR:-/var/www/letsencrypt}"
          NGINX_HTTP_CONF="${NGINX_HTTP_CONF:-/etc/nginx/sites-available/jeeey.conf}"
          NGINX_SSL_CONF="${NGINX_SSL_CONF:-/etc/nginx/sites-available/jeeey-ssl.conf}"
          D="$"

          log(){ echo "[fix-admin] $*"; }
          has(){ command -v "$1" >/dev/null 2>&1; }
          headp(){ sed -n '1,15p'; }

          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -y || true
          sudo apt-get install -y nginx ufw certbot python3-certbot-nginx curl coreutils || true
          if ! has pm2; then if has npm; then sudo npm i -g pm2@5 || true; fi; fi

          if has ufw; then
            sudo ufw allow OpenSSH >/dev/null 2>&1 || true
            sudo ufw allow 'Nginx Full' >/dev/null 2>&1 || { sudo ufw allow 80/tcp >/dev/null 2>&1; sudo ufw allow 443/tcp >/dev/null 2>&1; }
            sudo ufw --force enable >/dev/null 2>&1 || true
          fi

          sudo mkdir -p "$WEBROOT_DIR"
          sudo chown -R www-data:www-data "$WEBROOT_DIR" || true

          # Remove conflicting conf
          sudo rm -f /etc/nginx/conf.d/default.conf /etc/nginx/sites-enabled/default /etc/nginx/conf.d/jeeey.conf || true

          # HTTP config (80)
          sudo tee "$NGINX_HTTP_CONF" >/dev/null <<CFG
          server { listen 80; listen [::]:80; server_name $DOMAIN_WEB www.$DOMAIN_WEB; location ^~ /.well-known/acme-challenge/ { root $WEBROOT_DIR; default_type text/plain; allow all; } location / { proxy_pass http://127.0.0.1:3000; proxy_set_header Host ${D}host; proxy_set_header X-Real-IP ${D}remote_addr; proxy_set_header X-Forwarded-For ${D}proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto ${D}scheme; } }
          server { listen 80; listen [::]:80; server_name $DOMAIN_ADMIN; add_header Cache-Control "no-store, no-cache, must-revalidate" always; add_header Pragma "no-cache" always; add_header X-Served-By "admin-nginx" always; location ^~ /.well-known/acme-challenge/ { root $WEBROOT_DIR; default_type text/plain; allow all; } location / { proxy_pass http://127.0.0.1:3001; proxy_set_header Host ${D}host; proxy_set_header X-Real-IP ${D}remote_addr; proxy_set_header X-Forwarded-For ${D}proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto ${D}scheme; } }
          server { listen 80; listen [::]:80; server_name $DOMAIN_API; proxy_cookie_domain ~.* .$DOMAIN_WEB; location ^~ /.well-known/acme-challenge/ { root $WEBROOT_DIR; default_type text/plain; allow all; } location / { proxy_pass http://127.0.0.1:4000; proxy_set_header Host ${D}host; proxy_set_header X-Real-IP ${D}remote_addr; proxy_set_header X-Forwarded-For ${D}proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto ${D}scheme; } }
          CFG
          sudo ln -sf "$NGINX_HTTP_CONF" "/etc/nginx/sites-enabled/$(basename "$NGINX_HTTP_CONF")"

          # Certs (optional)
          if [ -n "$CERTBOT_EMAIL" ] && [ "${ENABLE_CERTBOT}" = "1" ]; then
            sudo certbot certonly --webroot -w "$WEBROOT_DIR" -n --agree-tos -m "$CERTBOT_EMAIL" -d "$DOMAIN_WEB" -d "www.$DOMAIN_WEB" || true
            sudo certbot certonly --webroot -w "$WEBROOT_DIR" -n --agree-tos -m "$CERTBOT_EMAIL" -d "$DOMAIN_ADMIN" || true
            sudo certbot certonly --webroot -w "$WEBROOT_DIR" -n --agree-tos -m "$CERTBOT_EMAIL" -d "$DOMAIN_API" || true
          fi

          # SSL config (443)
          WEB_CERT_DIR="/etc/letsencrypt/live/$DOMAIN_WEB"
          ADMIN_CERT_DIR="/etc/letsencrypt/live/$DOMAIN_ADMIN"
          API_CERT_DIR="/etc/letsencrypt/live/$DOMAIN_API"
          sudo tee "$NGINX_SSL_CONF" >/dev/null <<CFG
          server { listen 443 ssl; listen [::]:443 ssl; server_name $DOMAIN_WEB www.$DOMAIN_WEB; ssl_certificate $WEB_CERT_DIR/fullchain.pem; ssl_certificate_key $WEB_CERT_DIR/privkey.pem; include /etc/letsencrypt/options-ssl-nginx.conf; ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; location / { proxy_pass http://127.0.0.1:3000; proxy_set_header Host ${D}host; proxy_set_header X-Real-IP ${D}remote_addr; proxy_set_header X-Forwarded-For ${D}proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto ${D}scheme; } }
          server { listen 443 ssl; listen [::]:443 ssl; server_name $DOMAIN_ADMIN; ssl_certificate $ADMIN_CERT_DIR/fullchain.pem; ssl_certificate_key $ADMIN_CERT_DIR/privkey.pem; include /etc/letsencrypt/options-ssl-nginx.conf; ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; add_header Cache-Control "no-store, no-cache, must-revalidate" always; add_header Pragma "no-cache" always; add_header X-Served-By "admin-nginx" always; location / { proxy_pass http://127.0.0.1:3001; proxy_set_header Host ${D}host; proxy_set_header X-Real-IP ${D}remote_addr; proxy_set_header X-Forwarded-For ${D}proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto ${D}scheme; } }
          server { listen 443 ssl; listen [::]:443 ssl; server_name $DOMAIN_API; ssl_certificate $API_CERT_DIR/fullchain.pem; ssl_certificate_key $API_CERT_DIR/privkey.pem; include /etc/letsencrypt/options-ssl-nginx.conf; ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; proxy_cookie_domain ~.* .$DOMAIN_WEB; location / { proxy_pass http://127.0.0.1:4000; proxy_set_header Host ${D}host; proxy_set_header X-Real-IP ${D}remote_addr; proxy_set_header X-Forwarded-For ${D}proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto ${D}scheme; } }
          CFG
          sudo ln -sf "$NGINX_SSL_CONF" "/etc/nginx/sites-enabled/$(basename "$NGINX_SSL_CONF")"
          sudo rm -f /etc/nginx/conf.d/jeeey.conf || true

          sudo nginx -t
          sudo systemctl enable nginx || true
          sudo systemctl reload nginx || sudo systemctl restart nginx

          export NODE_ENV=production
          export COOKIE_DOMAIN="$COOKIE_DOMAIN"
          pm2 list || true
          pm2 delete ecom-web || true
          pm2 delete ecom-admin || true
          pm2 delete ecom-api || true
          if [ -f "$PROJECT_DIR/infra/deploy/ecosystem.config.js" ]; then
            sudo cp -f "$PROJECT_DIR/infra/deploy/ecosystem.config.js" /etc/pm2.ecosystem.config.js || true
            pm2 start /etc/pm2.ecosystem.config.js --only ecom-web --update-env || true
            pm2 start /etc/pm2.ecosystem.config.js --only ecom-admin --update-env || true
            pm2 start /etc/pm2.ecosystem.config.js --only ecom-api --update-env || true
            pm2 save || true
          fi
          sleep 2
          if ! ss -ltnp | grep -q ':3001'; then
            if command -v corepack >/dev/null 2>&1; then corepack enable || true; fi
            if ! command -v pnpm >/dev/null 2>&1; then if command -v corepack >/dev/null 2>&1; then corepack prepare pnpm@9 --activate || true; fi; fi
            ( cd "$PROJECT_DIR" && pnpm --filter admin build ) || true
            pm2 restart ecom-admin --update-env || true
            sleep 2
          fi

          echo "--- nginx -T (first 200) ---"; sudo nginx -T 2>&1 | sed -n '1,200p' | cat || true
          echo "--- Ports 80/443/3000/3001/4000 ---"; ss -ltnp | egrep ':80|:443|:3000|:3001|:4000' | cat || true
          echo "--- PM2 status ---"; pm2 status || true
          echo "--- curl 3000 ---"; curl -Is http://127.0.0.1:3000/ | head -n 10 | cat || true
          echo "--- curl 3001 ---"; curl -Is http://127.0.0.1:3001/ | head -n 10 | cat || true
          echo "--- HTTPS admin root ---"; curl -Is --resolve "$DOMAIN_ADMIN:443:127.0.0.1" "https://$DOMAIN_ADMIN/" | head -n 10 | cat || true
          echo "--- HTTPS admin finance ---"; curl -Is --resolve "$DOMAIN_ADMIN:443:127.0.0.1" "https://$DOMAIN_ADMIN/finance/revenues" | head -n 10 | cat || true
          echo "--- DNS resolve admin ---"; getent hosts "$DOMAIN_ADMIN" | cat || true
          EOF
          chmod +x /tmp/.fix-admin.sh
          sudo bash /tmp/.fix-admin.sh

      - name: Fix API and verify end-to-end auth
        run: |
          set -euo pipefail
          cat > /tmp/.fix-api-auth.sh <<'EOF'
          #!/usr/bin/env bash
          set -euo pipefail

          PROJ="/var/www/ecom"
          PNPM_STORE="$PROJ/.pnpm-store"
          cd "$PROJ" || exit 1

          # Ensure pnpm non-interactive
          if command -v corepack >/dev/null 2>&1; then corepack enable || true; corepack prepare pnpm@9 --activate || true; fi
          command -v pnpm >/dev/null 2>&1 || npm i -g pnpm@9 || true
          pnpm config set store-dir "$PNPM_STORE" --location project || true
          export CI=1 COOKIE_DOMAIN=.jeeey.com

          # Load API env if present (for DATABASE_URL, JWT_SECRET); skip step if missing
          if [ -f packages/api/.env ]; then set -a; . packages/api/.env; set +a; fi
          if [ -z "${DATABASE_URL:-}" ] || [ -z "${JWT_SECRET:-}" ]; then
            echo "[skip] API env (DATABASE_URL/JWT_SECRET) missing; skipping API rebuild and E2E auth checks.";
            exit 0;
          fi

          # Install deps (force, non-interactive)
          NODE_ENV=development
          if ! NODE_ENV=development pnpm install --force --no-frozen-lockfile --store-dir "$PNPM_STORE"; then
            find "$PROJ" -type d -name node_modules -prune -exec rm -rf {} + || true
            NODE_ENV=development pnpm install --force --no-frozen-lockfile --store-dir "$PNPM_STORE"
          fi

          # DB (best-effort) and build API
          NODE_ENV=development pnpm --filter @repo/db db:generate || true
          NODE_ENV=development pnpm --filter @repo/db db:push || true
          NODE_ENV=development pnpm --filter @repo/api build || true

          # Restart API
          export NODE_ENV=production
          pm2 restart ecom-api --update-env || pm2 start /etc/pm2.ecosystem.config.js --only ecom-api --update-env || true
          sleep 4

          echo "--- API health ---"
          if ! curl -fsSI http://127.0.0.1:4000/health | head -n 1 | cat; then
            echo "[logs] ecom-api last 120"
            pm2 logs ecom-api --lines 120 --nostream | tail -n 120 | cat || true
            exit 1
          fi

          # Login and finance request with cookie
          TMP_DIR="$(mktemp -d)"; CJ="$TMP_DIR/c.jar"
          echo "--- Set-Cookie after login ---"
          curl -fsS -i \
            -H "Content-Type: application/json" \
            -H "Origin: https://admin.jeeey.com" \
            -c "$CJ" \
            --data '{"email":"admin@example.com","password":"admin123"}' \
            "https://api.jeeey.com/api/admin/auth/login" | sed -n '1,25p' | cat

          echo "--- Finance with cookie (expect 200 OK) ---"
          curl -fsS -I -b "$CJ" -L "https://admin.jeeey.com/finance/revenues" | sed -n '1,12p' | cat
          rm -rf "$TMP_DIR" || true
          EOF
          chmod +x /tmp/.fix-api-auth.sh
          sudo bash /tmp/.fix-api-auth.sh

      - name: Verify Admin Notifications page (must be 200)
        run: |
          set -euo pipefail
          TMP_DIR="$(mktemp -d)"; CJ="$TMP_DIR/c.jar"
          echo "--- Login for admin session cookie ---"
          curl -fsS -i \
            -H "Content-Type: application/json" \
            -H "Origin: https://admin.jeeey.com" \
            -c "$CJ" \
            --data '{"email":"admin@example.com","password":"admin123"}' \
            "https://api.jeeey.com/api/admin/auth/login" | sed -n '1,20p' | cat
          echo "--- GET /notifications (expect 200) ---"
          CODE=$(curl -fsS -L -b "$CJ" -o /dev/null -w "%{http_code}" "https://admin.jeeey.com/notifications")
          echo "status: $CODE"
          rm -rf "$TMP_DIR" || true
          test "$CODE" = "200"

      - name: Verify Finance & Loyalty pages (must be 200)
        run: |
          set -euo pipefail
          TMP_DIR="$(mktemp -d)"; CJ="$TMP_DIR/c.jar"
          curl -fsS -i \
            -H "Content-Type: application/json" \
            -H "Origin: https://admin.jeeey.com" \
            -c "$CJ" \
            --data '{"email":"admin@example.com","password":"admin123"}' \
            "https://api.jeeey.com/api/admin/auth/login" >/dev/null
          for path in \
            "/finance/revenues" \
            "/finance/expenses" \
            "/loyalty/points" \
            "/loyalty/points-log" \
          ; do
            CODE=$(curl -fsS -L -b "$CJ" -o /dev/null -w "%{http_code}" "https://admin.jeeey.com${path}")
            echo "${path}: $CODE"
            test "$CODE" = "200"
          done
          rm -rf "$TMP_DIR" || true

      - name: Check built admin routes exist in .next (notifications/finance/loyalty)
        run: |
          set -euo pipefail
          ROOT="/var/www/ecom/apps/admin/.next/server/app"
          echo "[tree head] $ROOT" && ls -la "$ROOT" | sed -n '1,80p' | cat || true
          for r in notifications finance/revenues loyalty/points; do
            echo "-- route: $r"
            if ls "$ROOT/$r"/page.* 1>/dev/null 2>&1; then ls -la "$ROOT/$r"/page.* | cat; else echo "MISSING: $ROOT/$r/page.*"; fi
          done

      - name: Verify sidebar HTML contains links (notifications/finance/loyalty)
        run: |
          set -euo pipefail
          TMP_DIR="$(mktemp -d)"; CJ="$TMP_DIR/c.jar"
          # Login to get cookie
          curl -fsS -i -H "Content-Type: application/json" -H "Origin: https://admin.jeeey.com" -c "$CJ" \
            --data '{"email":"admin@example.com","password":"admin123"}' \
            "https://api.jeeey.com/api/admin/auth/login" | sed -n '1,20p' | cat
          # Fetch admin root HTML and grep for sidebar links
          HTML="$TMP_DIR/root.html"
          curl -fsS -L -b "$CJ" "https://admin.jeeey.com/" -o "$HTML"
          echo "[grep links]"
          for href in 'href="/notifications"' 'href="/finance/revenues"' 'href="/loyalty/points"'; do
            echo -n "$href -> ";
            if grep -q "$href" "$HTML"; then echo "FOUND"; else echo "NOT FOUND"; fi
          done
          echo "[first 40 lines of HTML]" && sed -n '1,40p' "$HTML" | cat || true
          rm -rf "$TMP_DIR" || true

      - name: Live verbose diagnostics (admin build, nginx, pm2, curls)
        run: |
          set -euxo pipefail
          echo "=== Whoami & Host ===" && whoami && uname -a && date -u
          echo "=== Admin build tree (.next/server/app) ==="
          ADMIN_DIR="/var/www/ecom/apps/admin"
          if [ -d "$ADMIN_DIR/.next/server/app" ]; then
            (cd "$ADMIN_DIR/.next/server/app" && find . -maxdepth 3 -type f | sort | sed -n '1,400p' ) | cat || true
          else
            echo ".next/server/app not found"; fi
          echo "=== Nginx admin server block (443) ==="
          sudo nginx -T 2>/dev/null | awk '/server_name admin\.jeeey\.com/{flag=1} /server_name/{if(flag && !/admin\\.jeeey\\.com/) flag=0} flag' | sed -n '1,200p' | cat || true
          echo "=== PM2 status ===" && pm2 status | sed -n '1,200p' | cat || true
          echo "=== PM2 logs ecom-admin (tail) ===" && pm2 logs ecom-admin --lines 60 --nostream | tail -n 60 | cat || true
          echo "=== API login & curls (HEAD then GET) ==="
          TMP_DIR="$(mktemp -d)"; CJ="$TMP_DIR/c.jar"
          curl -fsS -i -H "Content-Type: application/json" -H "Origin: https://admin.jeeey.com" -c "$CJ" \
            --data '{"email":"admin@example.com","password":"admin123"}' "https://api.jeeey.com/api/admin/auth/login" | sed -n '1,25p' | cat
          for m in HEAD GET; do
            for p in / /notifications /finance/revenues /loyalty/points; do
              if [ "$m" = HEAD ]; then
                echo "--- HEAD $p ---"; curl -fsS -I -b "$CJ" -L "https://admin.jeeey.com$p" | sed -n '1,10p' | cat || true
              else
                echo "--- GET $p (status only) ---"; curl -fsS -L -b "$CJ" -o /dev/null -w "%{http_code}\n" "https://admin.jeeey.com$p" || true
              fi
            done
          done
          rm -rf "$TMP_DIR" || true
          echo "=== Done diagnostics ==="

      - name: Full sync from origin/main, clean build, restart, verify (final)
        run: |
          set -euxo pipefail
          PROJ="/var/www/ecom"
          REPO="https://github.com/wwwrwww65-netizen/1111.git"
          PNPM_STORE="$PROJ/.pnpm-store"

          echo "[sync] fetching latest origin/main into $PROJ"
          if [ -d "$PROJ/.git" ]; then
            cd "$PROJ"
            git remote set-url origin "$REPO"
            git fetch --all --prune
            git reset --hard origin/main
          else
            TMP_DIR="$(mktemp -d)"
            git clone --depth=1 "$REPO" "$TMP_DIR"
            sudo install -d -m 755 "$PROJ"
            sudo rsync -a --delete "$TMP_DIR"/ "$PROJ"/
            rm -rf "$TMP_DIR"
          fi
          # Ensure writable by runner user
          sudo chown -R "$(whoami)":"$(id -gn)" "$PROJ"

          echo "[deps] installing"
          if command -v corepack >/dev/null 2>&1; then corepack enable || true; corepack prepare pnpm@9 --activate || true; fi
          command -v pnpm >/dev/null 2>&1 || sudo npm i -g pnpm@9 || true
          cd "$PROJ"
          pnpm config set store-dir "$PNPM_STORE" --location project || true
          pnpm install --force --no-frozen-lockfile --store-dir "$PNPM_STORE"

          echo "[api] env check & build"
          test -f packages/api/.env
          set -a; . packages/api/.env; set +a
          : "${DATABASE_URL:?missing}"
          : "${JWT_SECRET:?missing}"
          pnpm --filter @repo/db db:generate || true
          pnpm --filter @repo/db db:push || true
          pnpm --filter @repo/api build || true

          echo "[admin] clean build"
          rm -rf "$PROJ/apps/admin/.next" || true
          pnpm --filter admin build

          echo "[pm2] restart apps"
          pm2 restart ecom-admin --update-env || pm2 start /etc/pm2.ecosystem.config.js --only ecom-admin --update-env || true
          pm2 restart ecom-api   --update-env || pm2 start /etc/pm2.ecosystem.config.js --only ecom-api --update-env   || true
          pm2 restart ecom-web   --update-env || pm2 start /etc/pm2.ecosystem.config.js --only ecom-web --update-env   || true
          pm2 save || true
          sleep 3

          echo "[verify] API health" && curl -fsSI http://127.0.0.1:4000/health | head -n1 | cat
          echo "[verify] built routes present" && ls -la "$PROJ/apps/admin/.next/server/app/finance" | sed -n '1,40p' | cat || true

          echo "[verify] login and GET 200"
          TMP_DIR="$(mktemp -d)"; CJ="$TMP_DIR/c.jar"
          curl -fsS -i -H "Content-Type: application/json" -H "Origin: https://admin.jeeey.com" -c "$CJ" \
            --data '{"email":"admin@example.com","password":"admin123"}' \
            "https://api.jeeey.com/api/admin/auth/login" | sed -n '1,20p' | cat
          for P in /notifications /finance/revenues /loyalty/points; do
            printf "[GET %s] " "$P"; curl -fsS -L -b "$CJ" -o /dev/null -w "%{http_code}\n" "https://admin.jeeey.com$P" || true
          done
          rm -rf "$TMP_DIR" || true

      - name: Verify repo->server sync (commit and checksums)
        run: |
          set -euo pipefail
          WS="$GITHUB_WORKSPACE"
          PROJ="/var/www/ecom"
          echo "[commit] workspace (GITHUB_SHA)" && echo "$GITHUB_SHA" | cat
          echo "[commit] workspace HEAD" && (cd "$WS" && git rev-parse HEAD) | cat
          echo "[commit] server HEAD" && (cd "$PROJ" && git rev-parse HEAD) | cat
          WSH=$(cd "$WS" && git rev-parse HEAD)
          SVH=$(cd "$PROJ" && git rev-parse HEAD)
          if [ "$WSH" != "$SVH" ]; then echo "MISMATCH: server not on same commit"; fi
          # Compare a few key files checksums
          for f in apps/admin/src/components/AppShell.tsx apps/admin/src/app/notifications/page.tsx apps/admin/src/app/finance/revenues/page.tsx; do
            if [ -f "$WS/$f" ] && [ -f "$PROJ/$f" ]; then
              echo "[sha256] $f"; sha256sum "$WS/$f" | awk '{print "WS:",$1}'; sha256sum "$PROJ/$f" | awk '{print "SV:",$1}';
            else
              echo "[missing] $f (on WS or SV)";
            fi
          done
          # Ensure built routes exist
          echo "[built routes exist]" && ls -la "$PROJ/apps/admin/.next/server/app/finance" | sed -n '1,40p' | cat || true
      - name: Capture admin screenshots and upload artifact
        run: |
          set -euo pipefail
          OUTDIR="/tmp/admin-snap/screenshots"
          mkdir -p "$OUTDIR"
          cd "$GITHUB_WORKSPACE"
          echo "[screens] installing chromium dependencies"
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            xvfb \
            chromium \
            libnss3 libxss1 libasound2 fonts-liberation \
            libatk-bridge2.0-0 libgtk-3-0 libdrm2 libgbm1 \
            libxdamage1 libxfixes3 libxcomposite1 libxrandr2 libxcb1 \
            libpangocairo-1.0-0 libpango-1.0-0 libcairo2 \
            ca-certificates fonts-noto-color-emoji || true
          echo "[screens] installing puppeteer"
          npm i puppeteer@22 node-fetch@3 --no-audit --no-fund || true
          echo "[screens] running puppeteer capture"
          export PUPPETEER_EXECUTABLE_PATH="/usr/bin/chromium"
          if ! xvfb-run -a node scripts/capture-admin-screens.js; then
            echo "[screens] Puppeteer failed; falling back to HTML snapshots"
            TMP_DIR="$(mktemp -d)"; CJ="$TMP_DIR/c.jar"
            # Login via API to get cookie
            curl -fsS -i -H "Content-Type: application/json" -H "Origin: https://admin.jeeey.com" -c "$CJ" \
              --data '{"email":"admin@example.com","password":"admin123"}' \
              "https://api.jeeey.com/api/admin/auth/login" | sed -n '1,20p' | cat
            # Fetch HTML pages
            for p in / /notifications /finance/revenues /loyalty/points; do
              safe=$(echo "$p" | sed 's#/#-#g' | sed 's/^-//')
              curl -fsS -L -b "$CJ" "https://admin.jeeey.com$p" -o "$OUTDIR/${safe}.html" || true
            done
            rm -rf "$TMP_DIR" || true
          fi
          echo "[screens] listing output dir" && ls -la "$OUTDIR" || true
        shell: bash
      - name: Upload screenshots artifact
        uses: actions/upload-artifact@v4
        with:
          name: admin-screenshots
          path: |
            /tmp/admin-snap/screenshots/*.png
            /tmp/admin-snap/screenshots/*.html
