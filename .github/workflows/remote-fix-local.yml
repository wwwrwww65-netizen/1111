name: Remote Fix (Local on Runner)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  fix_local:
    name: Fix & Diagnose (Local)
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Run fix-admin locally (no SSH)
        env:
          CERTBOT_EMAIL: ${{ secrets.OPTIONAL_CERTBOT_EMAIL }}
          COOKIE_DOMAIN: .jeeey.com
        run: |
          set -euo pipefail
          cat > /tmp/.fix-admin.sh <<'EOF'
          #!/usr/bin/env bash
          set -euo pipefail

          PROJECT_DIR="${PROJECT_DIR:-/var/www/ecom}"
          DOMAIN_WEB="${DOMAIN_WEB:-jeeey.com}"
          DOMAIN_ADMIN="${DOMAIN_ADMIN:-admin.jeeey.com}"
          DOMAIN_API="${DOMAIN_API:-api.jeeey.com}"
          CERTBOT_EMAIL="${CERTBOT_EMAIL:-}"
          ENABLE_CERTBOT="${ENABLE_CERTBOT:-1}"
          COOKIE_DOMAIN="${COOKIE_DOMAIN:-.jeeey.com}"
          WEBROOT_DIR="${WEBROOT_DIR:-/var/www/letsencrypt}"
          NGINX_HTTP_CONF="${NGINX_HTTP_CONF:-/etc/nginx/sites-available/jeeey.conf}"
          NGINX_SSL_CONF="${NGINX_SSL_CONF:-/etc/nginx/sites-available/jeeey-ssl.conf}"
          D="$"

          log(){ echo "[fix-admin] $*"; }
          has(){ command -v "$1" >/dev/null 2>&1; }
          headp(){ sed -n '1,15p'; }

          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -y || true
          sudo apt-get install -y nginx ufw certbot python3-certbot-nginx curl coreutils || true
          if ! has pm2; then if has npm; then sudo npm i -g pm2@5 || true; fi; fi

          if has ufw; then
            sudo ufw allow OpenSSH >/dev/null 2>&1 || true
            sudo ufw allow 'Nginx Full' >/dev/null 2>&1 || { sudo ufw allow 80/tcp >/dev/null 2>&1; sudo ufw allow 443/tcp >/dev/null 2>&1; }
            sudo ufw --force enable >/dev/null 2>&1 || true
          fi

          sudo mkdir -p "$WEBROOT_DIR"
          sudo chown -R www-data:www-data "$WEBROOT_DIR" || true

          # Remove conflicting conf
          sudo rm -f /etc/nginx/conf.d/default.conf /etc/nginx/sites-enabled/default /etc/nginx/conf.d/jeeey.conf || true

          # HTTP config (80)
          sudo tee "$NGINX_HTTP_CONF" >/dev/null <<CFG
          server { listen 80; listen [::]:80; server_name $DOMAIN_WEB www.$DOMAIN_WEB; location ^~ /.well-known/acme-challenge/ { root $WEBROOT_DIR; default_type text/plain; allow all; } location / { proxy_pass http://127.0.0.1:3000; proxy_set_header Host ${D}host; proxy_set_header X-Real-IP ${D}remote_addr; proxy_set_header X-Forwarded-For ${D}proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto ${D}scheme; } }
          server { listen 80; listen [::]:80; server_name $DOMAIN_ADMIN; location ^~ /.well-known/acme-challenge/ { root $WEBROOT_DIR; default_type text/plain; allow all; } location / { proxy_pass http://127.0.0.1:3001; proxy_set_header Host ${D}host; proxy_set_header X-Real-IP ${D}remote_addr; proxy_set_header X-Forwarded-For ${D}proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto ${D}scheme; } }
          server { listen 80; listen [::]:80; server_name $DOMAIN_API; proxy_cookie_domain ~.* .$DOMAIN_WEB; location ^~ /.well-known/acme-challenge/ { root $WEBROOT_DIR; default_type text/plain; allow all; } location / { proxy_pass http://127.0.0.1:4000; proxy_set_header Host ${D}host; proxy_set_header X-Real-IP ${D}remote_addr; proxy_set_header X-Forwarded-For ${D}proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto ${D}scheme; } }
          CFG
          sudo ln -sf "$NGINX_HTTP_CONF" "/etc/nginx/sites-enabled/$(basename "$NGINX_HTTP_CONF")"

          # Certs (optional)
          if [ -n "$CERTBOT_EMAIL" ] && [ "${ENABLE_CERTBOT}" = "1" ]; then
            sudo certbot certonly --webroot -w "$WEBROOT_DIR" -n --agree-tos -m "$CERTBOT_EMAIL" -d "$DOMAIN_WEB" -d "www.$DOMAIN_WEB" || true
            sudo certbot certonly --webroot -w "$WEBROOT_DIR" -n --agree-tos -m "$CERTBOT_EMAIL" -d "$DOMAIN_ADMIN" || true
            sudo certbot certonly --webroot -w "$WEBROOT_DIR" -n --agree-tos -m "$CERTBOT_EMAIL" -d "$DOMAIN_API" || true
          fi

          # SSL config (443)
          WEB_CERT_DIR="/etc/letsencrypt/live/$DOMAIN_WEB"
          ADMIN_CERT_DIR="/etc/letsencrypt/live/$DOMAIN_ADMIN"
          API_CERT_DIR="/etc/letsencrypt/live/$DOMAIN_API"
          sudo tee "$NGINX_SSL_CONF" >/dev/null <<CFG
          server { listen 443 ssl; listen [::]:443 ssl; server_name $DOMAIN_WEB www.$DOMAIN_WEB; ssl_certificate $WEB_CERT_DIR/fullchain.pem; ssl_certificate_key $WEB_CERT_DIR/privkey.pem; include /etc/letsencrypt/options-ssl-nginx.conf; ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; location / { proxy_pass http://127.0.0.1:3000; proxy_set_header Host ${D}host; proxy_set_header X-Real-IP ${D}remote_addr; proxy_set_header X-Forwarded-For ${D}proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto ${D}scheme; } }
          server { listen 443 ssl; listen [::]:443 ssl; server_name $DOMAIN_ADMIN; ssl_certificate $ADMIN_CERT_DIR/fullchain.pem; ssl_certificate_key $ADMIN_CERT_DIR/privkey.pem; include /etc/letsencrypt/options-ssl-nginx.conf; ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; location / { proxy_pass http://127.0.0.1:3001; proxy_set_header Host ${D}host; proxy_set_header X-Real-IP ${D}remote_addr; proxy_set_header X-Forwarded-For ${D}proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto ${D}scheme; } }
          server { listen 443 ssl; listen [::]:443 ssl; server_name $DOMAIN_API; ssl_certificate $API_CERT_DIR/fullchain.pem; ssl_certificate_key $API_CERT_DIR/privkey.pem; include /etc/letsencrypt/options-ssl-nginx.conf; ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; proxy_cookie_domain ~.* .$DOMAIN_WEB; location / { proxy_pass http://127.0.0.1:4000; proxy_set_header Host ${D}host; proxy_set_header X-Real-IP ${D}remote_addr; proxy_set_header X-Forwarded-For ${D}proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto ${D}scheme; } }
          CFG
          sudo ln -sf "$NGINX_SSL_CONF" "/etc/nginx/sites-enabled/$(basename "$NGINX_SSL_CONF")"
          sudo rm -f /etc/nginx/conf.d/jeeey.conf || true

          sudo nginx -t
          sudo systemctl enable nginx || true
          sudo systemctl reload nginx || sudo systemctl restart nginx

          export NODE_ENV=production
          export COOKIE_DOMAIN="$COOKIE_DOMAIN"
          pm2 list || true
          pm2 delete ecom-web || true
          pm2 delete ecom-admin || true
          pm2 delete ecom-api || true
          if [ -f "$PROJECT_DIR/infra/deploy/ecosystem.config.js" ]; then
            sudo cp -f "$PROJECT_DIR/infra/deploy/ecosystem.config.js" /etc/pm2.ecosystem.config.js || true
            pm2 start /etc/pm2.ecosystem.config.js --only ecom-web --update-env || true
            pm2 start /etc/pm2.ecosystem.config.js --only ecom-admin --update-env || true
            pm2 start /etc/pm2.ecosystem.config.js --only ecom-api --update-env || true
            pm2 save || true
          fi
          sleep 2
          if ! ss -ltnp | grep -q ':3001'; then
            if command -v corepack >/dev/null 2>&1; then corepack enable || true; fi
            if ! command -v pnpm >/dev/null 2>&1; then if command -v corepack >/dev/null 2>&1; then corepack prepare pnpm@9 --activate || true; fi; fi
            ( cd "$PROJECT_DIR" && pnpm --filter admin build ) || true
            pm2 restart ecom-admin --update-env || true
            sleep 2
          fi

          echo "--- nginx -T (first 200) ---"; sudo nginx -T 2>&1 | sed -n '1,200p' | cat || true
          echo "--- Ports 80/443/3000/3001/4000 ---"; ss -ltnp | egrep ':80|:443|:3000|:3001|:4000' | cat || true
          echo "--- PM2 status ---"; pm2 status || true
          echo "--- curl 3000 ---"; curl -Is http://127.0.0.1:3000/ | head -n 10 | cat || true
          echo "--- curl 3001 ---"; curl -Is http://127.0.0.1:3001/ | head -n 10 | cat || true
          echo "--- HTTPS admin root ---"; curl -Is --resolve "$DOMAIN_ADMIN:443:127.0.0.1" "https://$DOMAIN_ADMIN/" | head -n 10 | cat || true
          echo "--- HTTPS admin finance ---"; curl -Is --resolve "$DOMAIN_ADMIN:443:127.0.0.1" "https://$DOMAIN_ADMIN/finance/revenues" | head -n 10 | cat || true
          echo "--- DNS resolve admin ---"; getent hosts "$DOMAIN_ADMIN" | cat || true
          EOF
          chmod +x /tmp/.fix-admin.sh
          sudo bash /tmp/.fix-admin.sh

      - name: Fix API and verify end-to-end auth
        run: |
          set -euo pipefail
          cat > /tmp/.fix-api-auth.sh <<'EOF'
          #!/usr/bin/env bash
          set -euo pipefail

          PROJ="/var/www/ecom"
          PNPM_STORE="$PROJ/.pnpm-store"
          cd "$PROJ" || exit 1

          # Ensure pnpm non-interactive
          if command -v corepack >/dev/null 2>&1; then corepack enable || true; corepack prepare pnpm@9 --activate || true; fi
          command -v pnpm >/dev/null 2>&1 || npm i -g pnpm@9 || true
          pnpm config set store-dir "$PNPM_STORE" --location project || true
          export CI=1 NODE_ENV=production COOKIE_DOMAIN=.jeeey.com

          # Load API env if present (for DATABASE_URL, JWT_SECRET)
          if [ -f packages/api/.env ]; then set -a; . packages/api/.env; set +a; fi

          # Quick guardrails
          : "${DATABASE_URL:?packages/api/.env: DATABASE_URL missing}"
          : "${JWT_SECRET:?packages/api/.env: JWT_SECRET missing}"

          # Install deps (force, non-interactive)
          if ! pnpm install --force --no-frozen-lockfile --store-dir "$PNPM_STORE"; then
            find "$PROJ" -type d -name node_modules -prune -exec rm -rf {} + || true
            pnpm install --force --no-frozen-lockfile --store-dir "$PNPM_STORE"
          fi

          # DB (best-effort) and build API
          pnpm --filter @repo/db db:generate || true
          pnpm --filter @repo/db db:push || true
          pnpm --filter @repo/api build || true

          # Restart API
          pm2 restart ecom-api --update-env || pm2 start /etc/pm2.ecosystem.config.js --only ecom-api --update-env || true
          sleep 4

          echo "--- API health ---"
          if ! curl -fsSI http://127.0.0.1:4000/health | head -n 1 | cat; then
            echo "[logs] ecom-api last 120"
            pm2 logs ecom-api --lines 120 --nostream | tail -n 120 | cat || true
            exit 1
          fi

          # Login and finance request with cookie
          TMP_DIR="$(mktemp -d)"; CJ="$TMP_DIR/c.jar"
          echo "--- Set-Cookie after login ---"
          curl -fsS -i \
            -H "Content-Type: application/json" \
            -H "Origin: https://admin.jeeey.com" \
            -c "$CJ" \
            --data '{"email":"admin@example.com","password":"admin123"}' \
            "https://api.jeeey.com/api/admin/auth/login" | sed -n '1,25p' | cat

          echo "--- Finance with cookie (expect 200 OK) ---"
          curl -fsS -I -b "$CJ" -L "https://admin.jeeey.com/finance/revenues" | sed -n '1,12p' | cat
          rm -rf "$TMP_DIR" || true
          EOF
          chmod +x /tmp/.fix-api-auth.sh
          sudo bash /tmp/.fix-api-auth.sh
