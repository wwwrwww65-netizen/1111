name: Build Android APK (EAS)

on:
  push:
    branches:
      - '**'
    paths:
      - 'apps/mobile/**'
      - '.github/workflows/eas-android-apk.yml'
  workflow_dispatch:
    inputs:
      TRPC_URL:
        description: "tRPC API URL (e.g., https://api.jeeey.com/trpc)"
        required: false
        default: "https://api.jeeey.com/trpc"

jobs:
  build_android_apk:
    runs-on: ubuntu-latest
    env:
      TRPC_URL: ${{ github.event.inputs.TRPC_URL || 'https://api.jeeey.com/trpc' }}
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      EAS_PROJECT_ID: ${{ secrets.EAS_PROJECT_ID || vars.EAS_PROJECT_ID }}
  # Run steps in explicit directories to ensure EAS archives include apps/mobile path
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies (workspace)
        run: pnpm install --no-frozen-lockfile --ignore-scripts
        working-directory: .

      - name: Inject config (TRPC + EAS projectId)
        working-directory: apps/mobile
        run: |
          node -e "const fs=require('fs');const p='./app.json';const j=JSON.parse(fs.readFileSync(p,'utf8'));j.expo=j.expo||{};j.expo.extra=j.expo.extra||{};j.expo.extra.EXPO_PUBLIC_TRPC_URL=process.env.TRPC_URL; if (process.env.EAS_PROJECT_ID) { j.expo.extra.eas=j.expo.extra.eas||{}; j.expo.extra.eas.projectId=process.env.EAS_PROJECT_ID; } fs.writeFileSync(p,JSON.stringify(j,null,2));console.log('Updated TRPC + projectId in app.json');"

      # Keep native folders in the archive so EAS can run Gradle wrapper reliably

      - name: Setup Expo & EAS
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ env.EXPO_TOKEN }}

      - name: Force Gradle downloads host in app plugin (optional)
        working-directory: apps/mobile
        run: |
          if [ -f plugins/gradle-setup-plugin.js ]; then
            sed -i 's#downloads.gradle-dn.com/distributions/#downloads.gradle.org/distributions/#g' plugins/gradle-setup-plugin.js
          fi

      - name: Ensure EAS login and link project
        working-directory: apps/mobile
        run: |
          eas whoami || eas account:login --token ${{ env.EXPO_TOKEN }}
          if [ -n "${{ env.EAS_PROJECT_ID }}" ]; then
            eas init --id "${{ env.EAS_PROJECT_ID }}" --non-interactive || true
          fi

      - name: Prepare packaging to include android/ (override .easignore)
        working-directory: apps/mobile
        run: |
          if [ -f .easignore ]; then
            echo "Before .easignore:" && cat .easignore || true
            # Remove lines that exclude android/ or ios/
            sed -i '/^android\//d' .easignore || true
            sed -i '/^ios\//d' .easignore || true
            echo "After .easignore:" && cat .easignore || true
          fi

      - name: Prebuild android locally (generate gradlew)
        working-directory: apps/mobile
        run: |
          pnpm dlx expo prebuild --platform android --clean --no-install || true
          test -f android/gradlew || { echo "gradlew missing after prebuild"; exit 1; }
          chmod +x android/gradlew || true

      - name: Build APK on EAS (remote)
        working-directory: apps/mobile
        env:
          # Disable VCS file list so untracked android/ is included in archive
          EAS_NO_VCS: '1'
        run: |
          eas build --platform android --profile preview --non-interactive

      - name: Download latest APK artifact
        run: eas build:download --platform android --latest --path ./build/app-preview.apk --non-interactive || true

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-preview-apk
          path: apps/mobile/build/app-preview.apk