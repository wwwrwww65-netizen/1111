name: Build Android APK (EAS)

on:
  push:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      TRPC_URL:
        description: "tRPC API URL (e.g., https://jeeeyai.onrender.com/trpc)"
        required: false
        default: "https://jeeeyai.onrender.com/trpc"

jobs:
  build_android_apk:
    runs-on: ubuntu-latest
    env:
      TRPC_URL: ${{ github.event.inputs.TRPC_URL || 'https://jeeeyai.onrender.com/trpc' }}
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
    defaults:
      run:
        working-directory: apps/mobile
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies (workspace)
        run: pnpm install --no-frozen-lockfile
        working-directory: .

      - name: Inject EXPO_PUBLIC_TRPC_URL
        run: |
          node -e "const fs=require('fs');const p='./app.json';const j=JSON.parse(fs.readFileSync(p,'utf8'));j.expo=j.expo||{};j.expo.extra=j.expo.extra||{};j.expo.extra.EXPO_PUBLIC_TRPC_URL=process.env.TRPC_URL;fs.writeFileSync(p,JSON.stringify(j,null,2));console.log('Updated app.json ->',j.expo.extra.EXPO_PUBLIC_TRPC_URL);"

      - name: Install EAS CLI
        run: pnpm dlx eas-cli@latest --version | cat

      - name: Expo whoami (verify token)
        run: pnpm dlx eas-cli whoami --non-interactive || true

      - name: Resolve Expo owner
        id: expo_owner
        run: |
          OWNER=$(pnpm dlx eas-cli whoami --non-interactive | awk '/Account/{print $2}' | tr -d '\r' || true)
          if [ -z "$OWNER" ]; then OWNER=""; fi
          echo "owner=$OWNER" >> $GITHUB_OUTPUT
          echo "Expo owner: $OWNER"

      - name: Ensure jq is available
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Build APK with EAS (cloud)
        run: pnpm dlx eas-cli build --platform android --profile preview --non-interactive --wait --json > build.json

      - name: Extract APK URL
        id: extract
        run: |
          URL=$(cat build.json | jq -r '.artifacts.buildUrl // .builds[0].artifacts.buildUrl // .artifacts.url // empty')
          if [ -z "$URL" ]; then
            echo "No cloud APK URL found. Will attempt local build fallback."
          else
            echo "apk_url=$URL" >> $GITHUB_OUTPUT
            echo "$URL" > apk_url.txt
            echo "APK URL: $URL" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Print APK URL
        if: ${{ steps.extract.outputs.apk_url != '' }}
        run: |
          echo "APK URL: ${{ steps.extract.outputs.apk_url }}"

      - name: Fallback to local build (Docker) if cloud URL missing
        if: ${{ steps.extract.outputs.apk_url == '' }}
        run: pnpm dlx eas-cli build --platform android --profile preview --non-interactive --local --output ./build/app-preview.apk

      - name: Upload local APK artifact (fallback)
        if: ${{ steps.extract.outputs.apk_url == '' }}
        uses: actions/upload-artifact@v4
        with:
          name: app-preview-apk
          path: apps/mobile/build/app-preview.apk

      - name: Upload APK URL artifact (cloud)
        if: ${{ steps.extract.outputs.apk_url != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: app-preview-apk-url
          path: apps/mobile/apk_url.txt