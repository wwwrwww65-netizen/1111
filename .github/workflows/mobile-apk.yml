name: Mobile - Build Android APK

on:
  push:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      profile:
        description: EAS profile to use (preview/internal/production)
        required: false
        default: preview

permissions:
  contents: read

jobs:
  build-android-apk:
    runs-on: ubuntu-latest
    env:
      EXPO_PUBLIC_TRPC_URL: ${{ secrets.EXPO_PUBLIC_TRPC_URL || vars.EXPO_PUBLIC_TRPC_URL }}
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      EAS_PROJECT_ID: ${{ secrets.EAS_PROJECT_ID || vars.EAS_PROJECT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies (no frozen lockfile)
        run: |
          pnpm config set frozen-lockfile false
          pnpm install --no-frozen-lockfile

      - name: Setup Expo & EAS
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ env.EXPO_TOKEN }}

      - name: Ensure EAS login
        run: eas whoami || eas account:login --token ${{ env.EXPO_TOKEN }}

      - name: Inject EAS projectId into app.json
        if: env.EAS_PROJECT_ID != ''
        working-directory: apps/mobile
        run: |
          node -e "const fs=require('fs');const p='app.json';const cfg=JSON.parse(fs.readFileSync(p,'utf8')); cfg.expo=cfg.expo||{}; cfg.expo.extra=cfg.expo.extra||{}; cfg.expo.extra.eas=cfg.expo.extra.eas||{}; cfg.expo.extra.eas.projectId='${{ env.EAS_PROJECT_ID }}'; fs.writeFileSync(p, JSON.stringify(cfg,null,2)); console.log('Injected projectId into app.json');"
          echo "Validating EAS project id..."
          eas project:info --json

      - name: Type check (mobile)
        working-directory: apps/mobile
        run: pnpm exec tsc -p tsconfig.json --noEmit

      - name: Verify required secrets
        run: |
          if [ -z "${{ env.EXPO_TOKEN }}" ]; then echo "EXPO_TOKEN is missing in Secrets" && exit 1; fi
          if [ -z "${{ env.EXPO_PUBLIC_TRPC_URL }}" ]; then echo "Warning: EXPO_PUBLIC_TRPC_URL is not set; using app.json default"; fi

      - name: Build APK with EAS (remote)
        working-directory: apps/mobile
        env:
          EXPO_PUBLIC_TRPC_URL: ${{ env.EXPO_PUBLIC_TRPC_URL }}
          EAS_PROJECT_ID: ${{ env.EAS_PROJECT_ID }}
        continue-on-error: true
        run: |
          PROFILE=${{ github.event.inputs.profile || 'preview' }}
          echo "Using EAS profile: $PROFILE"
          eas build --platform android --profile "$PROFILE" --non-interactive

      - name: Download APK artifact
        working-directory: apps/mobile
        run: |
          eas build:download --latest --platform android --output app.apk || true
          if [ ! -s app.apk ]; then
            echo "APK not downloaded; listing recent builds to help debugging..."
            eas build:list --json --limit 5 --platform android || true
            echo "HAVE_APK=0" >> $GITHUB_ENV
          else
            echo "HAVE_APK=1" >> $GITHUB_ENV
          fi

      - name: Setup Java 17 (fallback)
        if: env.HAVE_APK != '1'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK (fallback)
        if: env.HAVE_APK != '1'
        uses: android-actions/setup-android@v3

      - name: Accept Android SDK licenses (fallback)
        if: env.HAVE_APK != '1'
        run: yes | sdkmanager --licenses

      - name: Install required Android SDK packages (fallback)
        if: env.HAVE_APK != '1'
        run: |
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Install image tools & generate placeholder assets (fallback)
        if: env.HAVE_APK != '1'
        working-directory: apps/mobile
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick pngcheck
          mkdir -p assets
          convert -size 512x512 canvas:white assets/icon.png
          convert -size 512x512 canvas:white assets/adaptive-icon.png
          convert -size 1242x2436 canvas:white assets/splash.png
          convert -size 32x32 canvas:white assets/favicon.png
          pngcheck -v assets/*.png | cat

      - name: Fallback - Local Debug APK build (no EAS credentials)
        if: env.HAVE_APK != '1'
        working-directory: apps/mobile
        run: |
          echo "Running local debug build fallback..."
          pnpm config set shamefully-hoist true
          pnpm install --no-frozen-lockfile --ignore-scripts
          # Ensure android package present
          node -e "const fs=require('fs');const p='app.json';const j=JSON.parse(fs.readFileSync(p,'utf8'));j.expo=j.expo||{};j.expo.android=j.expo.android||{};j.expo.android.package=j.expo.android.package||'com.example.ecom';fs.writeFileSync(p,JSON.stringify(j,null,2));console.log('android.package ->',j.expo.android.package);"
          # Ensure expo-modules-autolinking path exists at node_modules/expo-modules-autolinking (pnpm fix)
          node -e "const fs=require('fs'),path=require('path');try{const pkg=require.resolve('expo-modules-autolinking/package.json');const src=path.dirname(pkg);const target=path.join(process.cwd(),'node_modules','expo-modules-autolinking');fs.mkdirSync(path.dirname(target),{recursive:true});try{fs.rmSync(target,{recursive:true,force:true});}catch{};fs.symlinkSync(src,target,'dir');console.log('Linked',target,'->',src);}catch(e){console.log('expo-modules-autolinking resolve failed',e.message)}"
          # Ensure @react-native/gradle-plugin path exists at node_modules/@react-native/gradle-plugin (pnpm fix)
          node -e "const fs=require('fs'),path=require('path');try{const pkg=require.resolve('@react-native/gradle-plugin/package.json');const src=path.dirname(pkg);const target=path.join(process.cwd(),'node_modules','@react-native','gradle-plugin');fs.mkdirSync(path.dirname(target),{recursive:true});try{fs.rmSync(target,{recursive:true,force:true});}catch{};fs.symlinkSync(src,target,'dir');console.log('Linked',target,'->',src);}catch(e){console.log('@react-native/gradle-plugin resolve failed',e.message)}"
          # Prebuild
          pnpm dlx expo prebuild --platform android --clean
          # Patch android/settings.gradle includeBuild paths to absolute directories
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const root = process.cwd();
          const candidates = ['android/settings.gradle', 'android/settings.gradle.kts'];
          const settingsPath = candidates.find(p => fs.existsSync(p));
          if (!settingsPath) {
            console.error('settings.gradle not found');
            process.exit(1);
          }
          let s = fs.readFileSync(settingsPath, 'utf8');
          const expoPath = path.join(root, 'node_modules', 'expo-modules-autolinking', 'android', 'expo-gradle-plugin').replace(/\\/g, '/');
          const rnPath = path.join(root, 'node_modules', '@react-native', 'gradle-plugin').replace(/\\/g, '/');
          if (!fs.existsSync(expoPath)) console.error('Missing expo-gradle-plugin at', expoPath);
          if (!fs.existsSync(rnPath)) console.error('Missing @react-native/gradle-plugin at', rnPath);
          const before = s;
          s = s.replace(/includeBuild\(['"][^'"]*expo-modules-autolinking[^'"]*expo-gradle-plugin['"]\)/g, `includeBuild('${expoPath}')`);
          s = s.replace(/includeBuild\(['"][^'"]*@react-native[^'"]*gradle-plugin['"]\)/g, `includeBuild('${rnPath}')`);
          if (!/gradlePluginPortal\(\)/.test(s)) {
            s = s.replace(/pluginManagement\s*\{([\s\S]*?)\}/, (block) =>
              block.replace(/repositories\s*\{([\s\S]*?)\}/, (repos) => repos.replace(/\}/, '\n        gradlePluginPortal()\n      }'))
            );
          }
          if (s !== before) {
            fs.writeFileSync(settingsPath, s);
            console.log('Patched', settingsPath);
          } else {
            console.log('No includeBuild patterns matched; appending explicit includes');
            let append = '';
            if (fs.existsSync(expoPath)) append += `\nincludeBuild('${expoPath}')\n`;
            if (fs.existsSync(rnPath)) append += `\nincludeBuild('${rnPath}')\n`;
            fs.appendFileSync(settingsPath, append);
          }
          console.log('\n--- settings.gradle head ---');
          console.log(s.split('\n').slice(0, 200).join('\n'));
          NODE
          # Build debug APK
          cd android
          chmod +x ./gradlew
          ./gradlew assembleDebug --no-daemon --stacktrace
          cd ..
          APK=$(ls -1 android/app/build/outputs/apk/debug/*.apk 2>/dev/null | head -n1 || true)
          if [ -n "$APK" ]; then cp "$APK" app.apk; fi
          if [ ! -s app.apk ]; then echo "Local debug APK not found"; exit 1; fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: mobile-apk-${{ github.sha }}
          path: |
            apps/mobile/app.apk
            apps/mobile/app-*.apk
          if-no-files-found: warn
