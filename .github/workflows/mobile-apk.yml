name: Mobile - Build Android APK

on:
  push:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      profile:
        description: EAS profile to use (preview/internal/production)
        required: false
        default: preview

permissions:
  contents: read

jobs:
  build-android-apk:
    runs-on: ubuntu-latest
    env:
      EXPO_PUBLIC_TRPC_URL: ${{ secrets.EXPO_PUBLIC_TRPC_URL || vars.EXPO_PUBLIC_TRPC_URL }}
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      EAS_PROJECT_ID: ${{ secrets.EAS_PROJECT_ID || vars.EAS_PROJECT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies (no frozen lockfile)
        run: |
          pnpm config set frozen-lockfile false
          pnpm install --no-frozen-lockfile

      - name: Remove native folders to force EAS Prebuild
        working-directory: apps/mobile
        run: |
          rm -rf android ios
          echo "Ensured no prebuilt native folders before EAS build"

      - name: Type check (mobile)
        working-directory: apps/mobile
        run: pnpm exec tsc -p tsconfig.json --noEmit

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Android SDK tools
        uses: android-actions/setup-android@v3

      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses

      - name: Install required Android SDK packages
        run: |
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Expo prebuild (android)
        working-directory: apps/mobile
        run: pnpm dlx expo prebuild --platform android --clean

      - name: Read Gradle version from wrapper
        id: read_gradle_version
        working-directory: apps/mobile
        run: |
          VER=$(sed -n "s#.*gradle-\([0-9.]*\)-bin.zip#\1#p" android/gradle/wrapper/gradle-wrapper.properties | head -n1)
          echo "Detected Gradle version: $VER"
          echo "gradle_version=$VER" >> $GITHUB_OUTPUT

      - name: Setup Gradle with cache
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
          gradle-version: ${{ steps.read_gradle_version.outputs.gradle_version }}

      - name: Prefetch Gradle distribution and force local file URL
        working-directory: apps/mobile
        run: |
          PROPS=android/gradle/wrapper/gradle-wrapper.properties
          URL=$(grep '^distributionUrl=' "$PROPS" | cut -d'=' -f2- | tr -d '\r')
          # Unescape gradle URL (https\:// -> https://)
          URL=$(echo "$URL" | sed 's#\\://#://#g')
          FILE=$(basename "$URL")
          DEST=$(pwd)/android/gradle/wrapper/$FILE
          echo "Gradle URL: $URL"
          echo "Downloading to: $DEST"
          curl -fL --retry 5 --retry-all-errors --connect-timeout 30 --max-time 600 -o "$DEST" "$URL"
          NEW_URL="file://$DEST"
          sed -i "s#^distributionUrl=.*#distributionUrl=${NEW_URL}#" "$PROPS"
          if grep -q '^networkTimeout=' "$PROPS"; then sed -i 's/^networkTimeout=.*/networkTimeout=600000/' "$PROPS"; else echo 'networkTimeout=600000' >> "$PROPS"; fi
          if ! grep -q '^validateDistributionUrl=' "$PROPS"; then echo 'validateDistributionUrl=true' >> "$PROPS"; fi
          echo "Updated $PROPS:" && cat "$PROPS"

      - name: Unzip Gradle distribution for local CLI
        working-directory: apps/mobile
        id: unzip_gradle
        run: |
          WRAPPER_DIR=android/gradle/wrapper
          FILE=$(basename $(grep '^distributionUrl=' "$WRAPPER_DIR/gradle-wrapper.properties" | cut -d'=' -f2- | tr -d '\r'))
          ZIP_PATH="$WRAPPER_DIR/$FILE"
          EXTRACT_DIR="$WRAPPER_DIR/gradle-dist"
          mkdir -p "$EXTRACT_DIR"
          unzip -q -o "$ZIP_PATH" -d "$EXTRACT_DIR"
          GRADLE_BIN=$(echo "$EXTRACT_DIR"/gradle-*/bin/gradle | head -n1)
          echo "Using GRADLE_BIN=$GRADLE_BIN"
          echo "gradle_bin=$GRADLE_BIN" >> $GITHUB_OUTPUT

      - name: Ensure gradle.properties has RN paths
        working-directory: apps/mobile
        run: |
          GP=android/gradle.properties
          {
            echo "REACT_NATIVE_NPM_PACKAGE=../node_modules/@react-native/gradle-plugin"
            echo "reactNativeDir=../node_modules/react-native"
            echo "org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g -Dfile.encoding=UTF-8"
            echo "org.gradle.daemon=true"
            echo "org.gradle.parallel=true"
          } >> "$GP"
          echo "Wrote $GP:" && tail -n 20 "$GP" | cat

      - name: Assemble release (Gradle CLI)
        working-directory: apps/mobile
        env:
          GRADLE_OPTS: "-Dorg.gradle.jvmargs='-Xmx4g -XX:MaxMetaspaceSize=1g -Dfile.encoding=UTF-8'"
        run: |
          for attempt in 1 2 3; do \
            "${{ steps.unzip_gradle.outputs.gradle_bin }}" -p android -Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -PreactNativeDir=../node_modules/react-native -PREACT_NATIVE_NPM_PACKAGE=../node_modules/@react-native/gradle-plugin :app:clean :app:assembleRelease --no-daemon --stacktrace && break || { \
              echo "Gradle attempt $attempt failed"; \
              if [ "$attempt" -lt 3 ]; then sleep $((attempt*15)); else exit 1; fi; \
            }; \
          done

      - name: Generate temporary release keystore
        working-directory: apps/mobile/android/app
        run: |
          keytool -genkey -v -keystore release.keystore -alias release -keyalg RSA -keysize 2048 -validity 10000 -storepass android -keypass android -dname "CN=example, OU=dev, O=company, L=city, S=state, C=US"

      - name: Zipalign and sign APK
        working-directory: apps/mobile/android/app/build/outputs/apk/release
        run: |
          APK_UNSIGNED=app-release-unsigned.apk
          if [ ! -f "$APK_UNSIGNED" ]; then echo "Unsigned APK not found"; ls -la; exit 1; fi
          BUILD_TOOLS=$(ls -v "$ANDROID_SDK_ROOT"/build-tools | tail -1)
          "$ANDROID_SDK_ROOT"/build-tools/$BUILD_TOOLS/zipalign -v -p 4 "$APK_UNSIGNED" app-release-aligned.apk
          "$ANDROID_SDK_ROOT"/build-tools/$BUILD_TOOLS/apksigner sign --ks ../../../../release.keystore --ks-pass pass:android --key-pass pass:android --out app-release-signed.apk app-release-aligned.apk
          "$ANDROID_SDK_ROOT"/build-tools/$BUILD_TOOLS/apksigner verify app-release-signed.apk

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: mobile-apk-${{ github.sha }}
          path: |
            apps/mobile/app.apk
            apps/mobile/app-*.apk
            apps/mobile/android/app/build/outputs/apk/release/app-release-signed.apk
          if-no-files-found: warn
