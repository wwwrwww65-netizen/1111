name: Deploy to VPS (SSH)

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      path:
        description: "Remote path"
        required: true
        default: "/var/www/ecom"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install pnpm
        run: corepack enable && corepack prepare pnpm@9 --activate
      - name: Archive project (use git archive to avoid file change warnings)
        run: |
          git config --global core.autocrlf false
          git archive --format=tar.gz -o app.tar.gz HEAD

      - name: Prepare API env file on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST || '72.60.92.17' }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            ROOT=${{ github.event.inputs.path || '/var/www/ecom' }}
            mkdir -p "$ROOT"
            F="$ROOT/.env.api"
            J=$(openssl rand -hex 32 || cat /proc/sys/kernel/random/uuid)
            M="deploy-$(date +%s)"
            {
              echo "NODE_ENV=production"
              echo "COOKIE_DOMAIN=.jeeey.com"
              echo "NEXT_PUBLIC_ADMIN_URL=https://admin.jeeey.com"
              echo "NEXT_PUBLIC_APP_URL=https://jeeey.com"
              echo "JWT_SECRET=${J}"
              echo "MAINTENANCE_SECRET=${M}"
              DB="${{ secrets.DATABASE_URL }}"; if [ -n "$DB" ]; then echo "DATABASE_URL=$DB"; fi
              DU="${{ secrets.DIRECT_URL }}"; if [ -n "$DU" ]; then echo "DIRECT_URL=$DU"; fi
            } > "$F.new"
            mv "$F.new" "$F"
            chmod 600 "$F"

      - name: Copy to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST || '72.60.92.17' }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "app.tar.gz"
          target: "/root/"

      - name: Remote deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST || '72.60.92.17' }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            PATH_ON_HOST=${{ github.event.inputs.path || '/var/www/ecom' }}
            mkdir -p "$PATH_ON_HOST"
            tar -xzf /root/app.tar.gz -C "$PATH_ON_HOST"
            cd "$PATH_ON_HOST"
            export ADMIN_EMAIL="${ADMIN_EMAIL:-admin@example.com}"
            export ADMIN_PASSWORD="${ADMIN_PASSWORD:-admin123}"
            bash infra/scripts/deploy.sh "$PATH_ON_HOST"
            echo '--- Install Nginx config (jeeey.conf) ---'
            if [ -f infra/nginx/jeeey.conf.tpl ]; then
              DOMAIN_ROOT="jeeey.com"
              TPL=$(cat infra/nginx/jeeey.conf.tpl)
              echo "$TPL" | sed "s/jeeey.com/${DOMAIN_ROOT}/g" > /etc/nginx/sites-available/jeeey.conf
              ln -sf /etc/nginx/sites-available/jeeey.conf /etc/nginx/sites-enabled/jeeey.conf
              nginx -t && systemctl reload nginx || true
            fi

      - name: Post-deploy smoke (health, login, static, services)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST || '72.60.92.17' }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -Eeuo pipefail
            ROOT="${{ github.event.inputs.path || '/var/www/ecom' }}"
            echo '--- Restart API service ---'
            systemctl reset-failed ecom-api || true
            systemctl try-restart ecom-api || true
            echo '--- API local health (4000) ---'
            okapi=0
            for i in $(seq 1 40); do
              code=$(curl -s -o /dev/null -w '%{http_code}' http://127.0.0.1:4000/health || true)
              if [ "$code" = "200" ]; then
                echo "api local ok: $code"; okapi=1; break
              fi
              sleep 1
            done
            if [ "$okapi" != "1" ]; then
              echo 'API did not become ready locally. Recent logs:'
              journalctl -u ecom-api --no-pager -n 200 || true
            fi
            echo '--- Restart admin service to load latest build ---'
            systemctl reset-failed ecom-admin || true
            systemctl try-restart ecom-admin || true
            echo '--- Wait for admin to listen on 3001 (local) ---'
            ok=0
            for i in $(seq 1 40); do
              code=$(curl -s -o /dev/null -w '%{http_code}' http://127.0.0.1:3001/ || true)
              if [ "$code" = "200" ] || [ "$code" = "301" ] || [ "$code" = "302" ] || [ "$code" = "307" ] || [ "$code" = "308" ]; then
                echo "admin local ok: $code"; ok=1; break
              fi
              sleep 1
            done
            if [ "$ok" != "1" ]; then
              echo 'Admin did not become ready locally. Recent logs:'
              journalctl -u ecom-admin --no-pager -n 200 || true
            fi
            echo '--- Restart web service to load latest build ---'
            systemctl reset-failed ecom-web || true
            systemctl try-restart ecom-web || true
            echo '--- Wait for web to listen on 3000 (local) ---'
            okw=0
            for i in $(seq 1 60); do
              code=$(curl -s -o /dev/null -w '%{http_code}' http://127.0.0.1:3000/ || true)
              if [ "$code" = "200" ] || [ "$code" = "301" ] || [ "$code" = "302" ] || [ "$code" = "307" ] || [ "$code" = "308" ]; then
                echo "web local ok: $code"; okw=1; break
              fi
              sleep 1
            done
            if [ "$okw" != "1" ]; then
              echo 'Web did not become ready locally. Recent logs:'
              journalctl -u ecom-web --no-pager -n 200 || true
            fi
            echo '--- Nginx config test ---'
            nginx -t
            echo '--- Services status ---'
            for s in ecom-api ecom-admin ecom-web; do systemctl is-active --quiet "$s" && echo "$s: active" || (echo "$s: inactive"; true); done
            echo '--- Health checks (local) ---'
            curl -fsS http://127.0.0.1:4000/health | head -n1 || true
            echo '--- Ensure admin exists & JSON login (local API) ---'
            set +e
            if [ -f "$ROOT/.env.api" ]; then
              JSON_STATUS=$(curl -s -o /dev/null -w '%{http_code}' -X POST http://127.0.0.1:4000/api/admin/auth/login -H 'content-type: application/json' --data '{"email":"admin@example.com","password":"admin123","remember":true}')
              if [ "$JSON_STATUS" != "200" ]; then
                . "$ROOT/.env.api" || true
                curl -s -X POST http://127.0.0.1:4000/api/admin/maintenance/create-admin -H "x-maintenance-secret: ${MAINTENANCE_SECRET:-}" -H 'content-type: application/json' --data '{"email":"admin@example.com","password":"admin123","name":"Admin"}' || true
                sleep 1
                JSON_STATUS=$(curl -s -o /dev/null -w '%{http_code}' -X POST http://127.0.0.1:4000/api/admin/auth/login -H 'content-type: application/json' --data '{"email":"admin@example.com","password":"admin123","remember":true}')
                echo "json status (retry): $JSON_STATUS"
              fi
            else
              echo '.env.api missing; skipping login.'
            fi
            set -e
      - name: External HTTPS smoke tests (retry)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST || '72.60.92.17' }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            doms=("https://jeeey.com" "https://admin.jeeey.com" "https://m.jeeey.com" "https://api.jeeey.com/health")
            for url in "${doms[@]}"; do
              echo "-- Smoke: $url"
              ok=0
              for i in $(seq 1 18); do
                code=$(curl -L -k -s -o /dev/null -w '%{http_code}' "$url" || true)
                if [ "$code" = "200" ] || [ "$code" = "204" ] || [ "$code" = "301" ] || [ "$code" = "302" ] || [ "$code" = "307" ] || [ "$code" = "308" ]; then ok=1; break; fi
                sleep 4
              done
              if [ "$ok" != "1" ]; then
                echo "Smoke failed for $url. Recent nginx errors:"
                journalctl -u nginx --no-pager -n 120 || true
                exit 1
              fi
            done

      - name: Print service logs (admin & web)
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo '=== ecom-admin logs (tail) ==='
            journalctl -u ecom-admin --no-pager -n 200 || true
            echo '=== ecom-web logs (tail) ==='
            journalctl -u ecom-web --no-pager -n 200 || true