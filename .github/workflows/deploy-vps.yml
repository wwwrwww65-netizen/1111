name: Deploy to VPS (SSH)

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      path:
        description: "Remote path"
        required: true
        default: "/var/www/ecom"
      allow_mutating_smokes:
        description: "Run data-mutating smokes (create vendor/user/category)"
        required: false
        type: boolean
        default: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install pnpm
        run: corepack enable && corepack prepare pnpm@8.6.10 --activate
      - name: Pre-deploy build verification
        run: |
          set -e
          pnpm install -r --no-frozen-lockfile
          pnpm --filter @repo/api build
          pnpm --filter admin build

      - name: Install Playwright (E2E dependencies)
        working-directory: scripts/ci
        run: |
          npm ci || npm i
          npx playwright install --with-deps chromium

      - name: Run E2E DeepSeek (admin) before deploy
        env:
          ADMIN_BASE: ${{ secrets.ADMIN_BASE || 'https://admin.jeeey.com' }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL || 'admin@example.com' }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD || 'admin123' }}
        working-directory: scripts/ci
        run: node e2e-deepseek.spec.mjs

      - name: Run E2E mweb-auth before deploy (non-blocking)
        if: always()
        continue-on-error: true
        env:
          MWEB_BASE: ${{ secrets.MWEB_BASE || 'https://m.jeeey.com' }}
          API_BASE: ${{ secrets.API_BASE || 'https://api.jeeey.com' }}
          TEST_PHONE: ${{ secrets.TEST_PHONE || '+966500000001' }}
        working-directory: scripts/ci
        run: node e2e-mweb-auth.mjs
      - name: Archive project (use git archive to avoid file change warnings)
        run: |
          git config --global core.autocrlf false
          git archive --format=tar.gz -o app.tar.gz HEAD

      - name: Set SSH connection env (with safe defaults)
        shell: bash
        env:
          VPS_HOST: ${{ secrets.VPS_HOST || vars.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER || vars.VPS_USER }}
          VPS_PORT: ${{ secrets.VPS_PORT || vars.VPS_PORT }}
        run: |
          set -e
          if [ -z "${VPS_HOST}" ]; then
            echo 'ERROR: VPS_HOST is not set in secrets/vars.'
            echo 'Dumping current env values for diagnostics:'
            echo "VPS_HOST='${VPS_HOST}' VPS_PORT='${VPS_PORT}' VPS_USER='${VPS_USER}'"
            echo 'Ensure these are set under Settings → Secrets and variables → Actions (Repository level).'
            exit 1
          fi
          echo "SSH_HOST=${VPS_HOST}" >> "$GITHUB_ENV"
          echo "SSH_USER=${VPS_USER:-root}" >> "$GITHUB_ENV"
          echo "SSH_PORT=${VPS_PORT:-22}" >> "$GITHUB_ENV"
      - name: Normalize SSH key to file (for appleboy actions)
        shell: bash
        run: |
          set -e
          if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            mkdir -p "$GITHUB_WORKSPACE/.ssh"
            umask 177
            KEY_CONTENT="${{ secrets.SSH_PRIVATE_KEY }}"
            if printf '%s' "$KEY_CONTENT" | grep -q '\\n'; then KEY_CONTENT=$(printf '%s' "$KEY_CONTENT" | sed 's/\\r//g; s/\\n/\n/g'); fi
            printf '%s' "$KEY_CONTENT" | tr -d '\r' > "$GITHUB_WORKSPACE/.ssh/deploy_key"
            # appleboy container may run as a different user; allow read access
            chmod 755 "$GITHUB_WORKSPACE/.ssh"
            chmod 644 "$GITHUB_WORKSPACE/.ssh/deploy_key"
            echo "SSH_KEY_PATH=$GITHUB_WORKSPACE/.ssh/deploy_key" >> "$GITHUB_ENV"
            echo "HAVE_SSH=1" >> "$GITHUB_ENV"
          fi
      - name: Write SSH key for preflight (if provided)
        shell: bash
        run: |
          set -e
          if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            mkdir -p ~/.ssh
            umask 177
            printf "%s\n" "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
            chmod 600 ~/.ssh/deploy_key
          else
            echo 'No SSH_PRIVATE_KEY secret provided; skipping handshake preflight'
          fi
      - name: Set admin credentials env
        run: |
          echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> "$GITHUB_ENV"
          echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> "$GITHUB_ENV"

      - name: Check SSH reachability (preflight with retries and handshake)
        if: ${{ env.HAVE_SSH == '1' }}
        shell: bash
        run: |
          set -e
          echo "Host: ${SSH_HOST} Port: ${SSH_PORT} User: ${SSH_USER}"
          echo 'DNS resolution:'
          getent hosts "${SSH_HOST}" || true
          CANDIDATE_PORTS="${SSH_PORT} 22 2222 443"
          SELECTED_PORT=""
          for p in $CANDIDATE_PORTS; do
            echo "== Probing TCP ${SSH_HOST}:$p =="
            ok=0
            for i in $(seq 1 10); do
              nc -z -w5 "${SSH_HOST}" "$p" && { ok=1; break; } || true
              sleep 2
            done
            if [ "$ok" = "1" ]; then
              echo "TCP reachable on port $p"; SELECTED_PORT="$p"; break
            fi
          done
          if [ -z "$SELECTED_PORT" ]; then
            echo 'ERROR: No reachable SSH TCP port found.'
            ip route || true
            exit 1
          fi
          echo "SELECTED_SSH_PORT=$SELECTED_PORT" >> "$GITHUB_ENV"
          if [ -f ~/.ssh/deploy_key ]; then
            echo "Attempting SSH handshake to ${SSH_USER}@${SSH_HOST}:$SELECTED_PORT ..."
            tries=0
            until ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o BatchMode=yes -o ConnectTimeout=8 -p "$SELECTED_PORT" "$SSH_USER@$SSH_HOST" 'echo ok' ; do
              tries=$((tries+1)); [ $tries -ge 5 ] && { echo 'SSH handshake failed'; exit 1; }
              sleep 3
            done
          fi

      - name: Prepare API env file on server
        if: ${{ env.HAVE_SSH == '1' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST || vars.VPS_HOST || env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key_path: ${{ env.SSH_KEY_PATH }}
          # ensure only one method is used: prefer key_path; supply key only if needed
          key: ${{ secrets.SSH_PRIVATE_KEY && '' }}
          password: ${{ secrets.SSH_PASSWORD && '' }}
          port: ${{ env.SELECTED_SSH_PORT || env.SSH_PORT }}
          timeout: 180s
          command_timeout: 15m
          debug: true
          script_stop: true
          script: |
            set -ex
            ROOT=${{ github.event.inputs.path || '/var/www/ecom' }}
            mkdir -p "$ROOT"
            F="$ROOT/.env.api"
            # Prefer GitHub Secrets for stable values; fallback to generated
            J="${{ secrets.JWT_SECRET || '' }}"; if [ -z "$J" ]; then J=$(openssl rand -hex 32 || cat /proc/sys/kernel/random/uuid); fi
            M="${{ secrets.MAINTENANCE_SECRET || '' }}"; if [ -z "$M" ]; then M="deploy-$(date +%s)"; fi
            {
              echo "NODE_ENV=production"
              echo "COOKIE_DOMAIN=${{ vars.COOKIE_DOMAIN || secrets.COOKIE_DOMAIN || '.jeeey.com' }}"
              echo "CORS_ALLOW_ORIGINS=${{ vars.CORS_ALLOW_ORIGINS || secrets.CORS_ALLOW_ORIGINS || 'https://jeeey.com,https://www.jeeey.com,https://admin.jeeey.com,https://api.jeeey.com' }}"
              echo "NEXT_PUBLIC_ADMIN_URL=https://admin.jeeey.com"
              echo "NEXT_PUBLIC_APP_URL=https://jeeey.com"
              echo "JWT_SECRET=${J}"
              echo "MAINTENANCE_SECRET=${M}"
              SENTRY="${{ secrets.SENTRY_DSN }}"; if [ -n "$SENTRY" ]; then echo "SENTRY_DSN=$SENTRY"; fi
              STRIPE="${{ secrets.STRIPE_SECRET_KEY }}"; if [ -n "$STRIPE" ]; then echo "STRIPE_SECRET_KEY=$STRIPE"; fi
              STRIPE_WH="${{ secrets.STRIPE_WEBHOOK_SECRET }}"; if [ -n "$STRIPE_WH" ]; then echo "STRIPE_WEBHOOK_SECRET=$STRIPE_WH"; fi
              CLOUD="${{ secrets.CLOUDINARY_URL }}"; if [ -n "$CLOUD" ]; then echo "CLOUDINARY_URL=$CLOUD"; fi
              DB="${{ secrets.DATABASE_URL }}"; if [ -n "$DB" ]; then echo "DATABASE_URL=$DB"; fi
              DU="${{ secrets.DIRECT_URL }}"; if [ -n "$DU" ]; then echo "DIRECT_URL=$DU"; fi
            } > "$F.new"
            mv "$F.new" "$F"
            chmod 600 "$F"

      - name: Prepare WEB env file on server
        if: ${{ env.HAVE_SSH == '1' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST || vars.VPS_HOST || env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key_path: ${{ env.SSH_KEY_PATH }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ env.SELECTED_SSH_PORT || env.SSH_PORT }}
          timeout: 180s
          command_timeout: 15m
          debug: true
          script_stop: true
          script: |
            set -ex
            ROOT=${{ github.event.inputs.path || '/var/www/ecom' }}
            F="$ROOT/.env.web"
            {
              echo "NEXT_PUBLIC_APP_URL=${{ vars.NEXT_PUBLIC_APP_URL || secrets.NEXT_PUBLIC_APP_URL || 'https://jeeey.com' }}"
              echo "NEXT_PUBLIC_ADMIN_URL=${{ vars.NEXT_PUBLIC_ADMIN_URL || secrets.NEXT_PUBLIC_ADMIN_URL || 'https://admin.jeeey.com' }}"
              echo "NEXT_PUBLIC_API_BASE_URL=${{ vars.NEXT_PUBLIC_API_BASE_URL || secrets.NEXT_PUBLIC_API_BASE_URL || 'https://api.jeeey.com' }}"
              echo "NEXT_PUBLIC_TRPC_URL=${{ vars.NEXT_PUBLIC_TRPC_URL || secrets.NEXT_PUBLIC_TRPC_URL || 'https://api.jeeey.com/trpc' }}"
            } > "$F.new"
            mv "$F.new" "$F"
            chmod 600 "$F"

      - name: Copy to server
        if: ${{ env.HAVE_SSH == '1' }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST || vars.VPS_HOST || env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key_path: ${{ env.SSH_KEY_PATH }}
          port: ${{ env.SELECTED_SSH_PORT || env.SSH_PORT }}
          timeout: 180s
          source: "app.tar.gz"
          target: "/root/"

      - name: Remote deploy
        if: ${{ env.HAVE_SSH == '1' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST || vars.VPS_HOST || env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key_path: ${{ env.SSH_KEY_PATH }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ env.SELECTED_SSH_PORT || env.SSH_PORT }}
          timeout: 240s
          command_timeout: 20m
          debug: true
          script_stop: true
          script: |
            set -ex
            PATH_ON_HOST=${{ github.event.inputs.path || '/var/www/ecom' }}
            mkdir -p "$PATH_ON_HOST"
            tar -xzf /root/app.tar.gz -C "$PATH_ON_HOST"
            cd "$PATH_ON_HOST"
            export ADMIN_EMAIL="${ADMIN_EMAIL:-admin@example.com}"
            export ADMIN_PASSWORD="${ADMIN_PASSWORD:-admin123}"
            bash infra/scripts/deploy.sh "$PATH_ON_HOST"
            echo '--- Prisma migrate (deploy) ---'
            if [ -f "$PATH_ON_HOST/.env.api" ]; then
              set -a
              . "$PATH_ON_HOST/.env.api"
              set +a
            fi
            if [ -n "${DATABASE_URL:-}" ] && [ -n "${DIRECT_URL:-}" ]; then
              echo "Running prisma migrate deploy with DATABASE_URL=$DATABASE_URL"
              cd "$PATH_ON_HOST/packages/db"
              pnpm install --prod --ignore-scripts || true
              npx prisma migrate deploy || pnpm prisma migrate deploy || true
              cd "$PATH_ON_HOST"
            else
              echo 'DATABASE_URL/DIRECT_URL not set; skipping prisma migrate deploy'
            fi
            echo '--- Install Nginx config (jeeey.conf) ---'
            if [ -f infra/nginx/jeeey.conf.tpl ]; then
              DOMAIN_ROOT="jeeey.com"
              TPL=$(cat infra/nginx/jeeey.conf.tpl)
              TMP="/tmp/jeeey.conf.$$"
              echo "$TPL" | sed "s/jeeey.com/${DOMAIN_ROOT}/g" > "$TMP"
              TARGET="/etc/nginx/sites-available/jeeey.conf"
              mv "$TMP" "$TARGET"
              ln -sf "$TARGET" /etc/nginx/sites-enabled/jeeey.conf
              echo 'Validating nginx config...'
              nginx -t && (systemctl reload nginx || systemctl restart nginx || true)
              echo 'Nginx config installed.'
            fi
            echo '--- Ensure HTTPS (certbot if configured) ---'
            CERT_EMAIL='${{ secrets.CERTBOT_EMAIL || vars.CERTBOT_EMAIL }}'
            [ -n "$CERT_EMAIL" ] && ( set +e; CERTBOT_EMAIL="$CERT_EMAIL" PROJECT_DIR="$ROOT" bash "$ROOT/infra/deploy/ensure-https.sh"; set -e ) || echo 'CERTBOT_EMAIL not set; skipping certbot/self-signed step.'

      - name: Post-deploy smoke (health, login, static, services)
        if: ${{ env.HAVE_SSH == '1' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST || vars.VPS_HOST || env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key_path: ${{ env.SSH_KEY_PATH }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ env.SELECTED_SSH_PORT || env.SSH_PORT }}
          timeout: 240s
          command_timeout: 20m
          debug: true
          script_stop: true
          script: |
            set -Eeuxo pipefail
            ROOT="${{ github.event.inputs.path || '/var/www/ecom' }}"
            echo '--- Restart API service ---'
            systemctl reset-failed ecom-api || true
            systemctl try-restart ecom-api || true
            echo '--- API local health (4000) ---'
            okapi=0
            for i in $(seq 1 40); do
              code=$(curl -s -o /dev/null -w '%{http_code}' http://127.0.0.1:4000/health || true)
              if [ "$code" = "200" ]; then
                echo "api local ok: $code"; okapi=1; break
              fi
              sleep 1
            done
            if [ "$okapi" != "1" ]; then
              echo 'API did not become ready locally. Recent logs:'
              journalctl -u ecom-api --no-pager -n 200 || true
              exit 1
            fi
            echo '--- Restart admin service to load latest build ---'
            systemctl reset-failed ecom-admin || true
            systemctl try-restart ecom-admin || true
            echo '--- Wait for admin to serve /login on 3001 (local) ---'
            ok=0
            for i in $(seq 1 40); do
              code=$(curl -s -o /dev/null -w '%{http_code}' http://127.0.0.1:3001/login || true)
              if [ "$code" = "200" ] || [ "$code" = "301" ] || [ "$code" = "302" ] || [ "$code" = "307" ] || [ "$code" = "308" ]; then
                echo "admin local ok: $code"; ok=1; break
              fi
              sleep 1
            done
            if [ "$ok" != "1" ]; then
              echo 'Admin did not become ready locally. Recent logs:'
              journalctl -u ecom-admin --no-pager -n 200 || true
              exit 1
            fi
            echo '--- Verify static chunk is served by app ---'
            CHUNK=$(find "$ROOT/apps/admin/.next/static" -type f -name '*.js' -printf '%P\n' | head -n1 || true)
            if [ -n "$CHUNK" ]; then
              code=$(curl -s -o /dev/null -w '%{http_code}' "http://127.0.0.1:3001/_next/static/$CHUNK" || true)
              echo "static chunk status: $code"
              [ "$code" = "200" ] || { echo "Static chunk not served"; exit 1; }
            else
              echo 'No static chunks found locally'; exit 1
            fi
            echo '--- Restart web service to load latest build ---'
            systemctl reset-failed ecom-web || true
            systemctl try-restart ecom-web || true
            echo '--- Wait for web to listen on 3000 (local) ---'
            okw=0
            for i in $(seq 1 60); do
              code=$(curl -s -o /dev/null -w '%{http_code}' http://127.0.0.1:3000/ || true)
              if [ "$code" = "200" ] || [ "$code" = "301" ] || [ "$code" = "302" ] || [ "$code" = "307" ] || [ "$code" = "308" ]; then
                echo "web local ok: $code"; okw=1; break
              fi
              sleep 1
            done
            if [ "$okw" != "1" ]; then
              echo 'Web did not become ready locally. Recent logs:'
              journalctl -u ecom-web --no-pager -n 200 || true
              exit 1
            fi
            echo '--- Nginx config test ---'
            nginx -t
            echo '--- Services status ---'
            for s in ecom-api ecom-admin ecom-web; do systemctl is-active --quiet "$s" && echo "$s: active" || (echo "$s: inactive"; true); done
            echo '--- Health checks (local) ---'
            curl -fsS http://127.0.0.1:4000/health | head -n1 || true
            echo '--- Ensure admin exists & JSON login (local API) ---'
            set +e
            if [ -f "$ROOT/.env.api" ]; then
              EMAIL="${ADMIN_EMAIL:-admin@example.com}"
              PASS="${ADMIN_PASSWORD:-admin123}"
              JSON_STATUS=$(curl -s -o /dev/null -w '%{http_code}' -X POST http://127.0.0.1:4000/api/admin/auth/login -H 'content-type: application/json' --data "{\"email\":\"$EMAIL\",\"password\":\"$PASS\",\"remember\":true}")
              if [ "$JSON_STATUS" != "200" ]; then
                . "$ROOT/.env.api" || true
                curl -s -X POST http://127.0.0.1:4000/api/admin/maintenance/create-admin -H "x-maintenance-secret: ${MAINTENANCE_SECRET:-}" -H 'content-type: application/json' --data "{\"email\":\"$EMAIL\",\"password\":\"$PASS\",\"name\":\"Admin\"}" || true
                sleep 1
                JSON_STATUS=$(curl -s -o /dev/null -w '%{http_code}' -X POST http://127.0.0.1:4000/api/admin/auth/login -H 'content-type: application/json' --data "{\"email\":\"$EMAIL\",\"password\":\"$PASS\",\"remember\":true}")
                echo "json status (retry): $JSON_STATUS"
                if [ "$JSON_STATUS" != "200" ]; then
                  echo 'Admin login failed after bootstrap'
                  journalctl -u ecom-api --no-pager -n 200 || true
                  exit 1
                fi
              fi
              # Verify whoami with cookie jar
              curl -c /tmp/c.jar -s -o /dev/null -w '%{http_code}\n' -X POST http://127.0.0.1:4000/api/admin/auth/login -H 'content-type: application/json' --data "{\"email\":\"$EMAIL\",\"password\":\"$PASS\",\"remember\":true}" | grep -q 200
              WHO=$(curl -b /tmp/c.jar -s http://127.0.0.1:4000/api/admin/auth/whoami || true)
              echo "whoami: $WHO"
              echo "$WHO" | grep -q '"authenticated":true' || { echo 'whoami did not authenticate'; exit 1; }
            else
              echo '.env.api missing; skipping login.'
            fi
            set -e
      - name: Post-deploy verify registration page and no 0.0.0.0
        if: ${{ env.HAVE_SSH == '1' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST || vars.VPS_HOST || env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key_path: ${{ env.SSH_KEY_PATH }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ env.SELECTED_SSH_PORT || env.SSH_PORT }}
          timeout: 180s
          command_timeout: 30m
          script: |
            set -e
            echo '--- Verify registration page (200) ---'
            code=$(curl -k -s -o /dev/null -w '%{http_code}' https://jeeey.com/register || true)
            echo "register status: $code"
            if [ "$code" != "200" ]; then
              echo 'Registration page did not return 200'; exit 1; fi
            echo '--- Verify registration HTML has no 0.0.0.0 references ---'
            html=$(curl -k -s https://jeeey.com/register || true)
            if echo "$html" | grep -Eq "://0\.0\.0\.0|0\.0\.0\.0:"; then
              echo 'Registration HTML contains 0.0.0.0'; exit 1; fi
            echo '--- Grep built outputs for 0.0.0.0 (should be none) ---'
            if (grep -R -nE "://0\.0\.0\.0|0\.0\.0\.0:" /var/www/ecom/apps/web/.next 2>/dev/null || true) | head -n1 | grep -q "0.0.0.0"; then
              echo 'Found 0.0.0.0 in web build output'; exit 1; fi
            if (grep -R -nE "://0\.0\.0\.0|0\.0\.0\.0:" /var/www/ecom/apps/admin/.next 2>/dev/null || true) | head -n1 | grep -q "0.0.0.0"; then
              echo 'Found 0.0.0.0 in admin build output'; exit 1; fi

      - name: Post-deploy admin login end-to-end trace
        if: ${{ env.HAVE_SSH == '1' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST || vars.VPS_HOST || env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key_path: ${{ env.SSH_KEY_PATH }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ env.SELECTED_SSH_PORT || env.SSH_PORT || secrets.VPS_PORT || vars.VPS_PORT || 22 }}
          timeout: 240s
          command_timeout: 15m
          debug: true
          script_stop: true
          script: |
            set -Eeuxo pipefail
            EMAIL=${ADMIN_EMAIL:-admin@example.com}
            PASS=${ADMIN_PASSWORD:-admin123}
            CJ=/tmp/admin_login_$$.cookies
            rm -f "$CJ"
            echo '--- Admin login via same-origin proxy (/api/admin/auth/login) ---'
            curl -k -sSi -c "$CJ" \
              -H 'origin: https://admin.jeeey.com' \
              -H 'content-type: application/json' \
              -X POST 'https://admin.jeeey.com/api/admin/auth/login' \
              --data "{\"email\":\"$EMAIL\",\"password\":\"$PASS\",\"remember\":true}" | sed -n '1,60p'
            echo
            echo '--- Extract token from response body (fallback to cookie if missing) ---'
            BODY=/tmp/admin_login_body_$$.json
            curl -k -s -c "$CJ" -H 'origin: https://admin.jeeey.com' -H 'content-type: application/json' -X POST 'https://admin.jeeey.com/api/admin/auth/login' --data "{\"email\":\"$EMAIL\",\"password\":\"$PASS\",\"remember\":true}" -o "$BODY"
            TOKEN=$(grep -o '"token":"[^"]\+"' "$BODY" | head -n1 | sed 's/.*"token":"\([^"]\+\)".*/\1/') || true
            if [ -n "${TOKEN:-}" ]; then echo "token: ${#TOKEN} bytes"; else echo 'token: (not present, will rely on cookie)'; fi
            echo
            echo '--- Simulate bridge set-cookie and redirect chain ---'
            if [ -n "${TOKEN:-}" ]; then
              curl -k -sSI -b "$CJ" "https://admin.jeeey.com/bridge?token=${TOKEN}&remember=true&next=%2F" | sed -n '1,40p'
              # load home after bridge
              CODE=$(curl -k -s -o /dev/null -w '%{http_code}' -b "$CJ" https://admin.jeeey.com/ || true)
              echo "admin home after bridge => $CODE"
              [ "$CODE" = "200" ] || { echo 'Admin home did not return 200 after bridge'; exit 1; }
            else
              echo 'No token available; verifying whoami using cookie...'
              curl -k -sSI -b "$CJ" https://admin.jeeey.com/ | sed -n '1,20p'
            fi
            echo
            echo '--- API whoami (cookie jar) ---'
            curl -k -sS -b "$CJ" https://api.jeeey.com/api/admin/auth/whoami | sed -n '1,80p'
            echo
            echo '--- Done ---'

      - name: Post-deploy admin CRUD smoke (RBAC, grant-admin, users, vendor, user)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.allow_mutating_smokes == true }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST || vars.VPS_HOST || env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key_path: ${{ env.SSH_KEY_PATH }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ env.SELECTED_SSH_PORT || env.SSH_PORT || secrets.VPS_PORT || vars.VPS_PORT || 22 }}
          timeout: 180s
          command_timeout: 60m
          script: |
            set -Eeuo pipefail
            EMAIL='${{ secrets.ADMIN_EMAIL || 'admin@example.com' }}'
            PASS='${{ secrets.ADMIN_PASSWORD || 'admin123' }}'
            SECRET='${{ secrets.MAINTENANCE_SECRET }}'
            if [ -z "$SECRET" ]; then echo 'MAINTENANCE_SECRET is empty'; exit 1; fi
            CJ=$(mktemp)
            echo '--- Login (JSON) ---'
            JSON=$(printf '{"email":"%s","password":"%s","remember":true}' "$EMAIL" "$PASS")
            CODE=$(curl -k -sS -w '%{http_code}' -o /tmp/login.body -c "$CJ" -H 'origin: https://admin.jeeey.com' -H 'content-type: application/json' -X POST https://api.jeeey.com/api/admin/auth/login --data "$JSON" || true)
            head -n 2 /tmp/login.body | sed -n '1,2p'
            [ "$CODE" = "200" ] || { echo "login failed: $CODE"; cat /tmp/login.body; exit 1; }
            echo '--- Ensure RBAC ---'
            RB=$(curl -k -sS -H "x-maintenance-secret: $SECRET" -X POST https://api.jeeey.com/api/admin/maintenance/ensure-rbac || true)
            echo "$RB" | sed -n '1,40p'
            echo '--- Grant admin ---'
            GA=$(curl -k -sS -H "x-maintenance-secret: $SECRET" -H 'content-type: application/json' -X POST https://api.jeeey.com/api/admin/maintenance/grant-admin --data "{\"email\":\"$EMAIL\"}" || true)
            echo "$GA" | sed -n '1,60p'
            echo '--- Users list (first 5) ---'
            UL=$(curl -k -sS -b "$CJ" 'https://api.jeeey.com/api/admin/users/list?page=1&limit=5' || true)
            echo "$UL" | sed -n '1,80p'
            echo '--- Create vendor (smoke) ---'
            VEND=$(curl -k -sS -b "$CJ" -H 'content-type: application/json' -X POST https://api.jeeey.com/api/admin/vendors --data '{"name":"Deploy Smoke Vendor"}' || true)
            echo "$VEND" | sed -n '1,80p'
            echo '--- Create user (smoke) ---'
            TS=$(date +%s)
            CUSR=$(curl -k -sS -b "$CJ" -H 'content-type: application/json' -X POST https://api.jeeey.com/api/admin/users --data "{\"email\":\"deploy+${TS}@local\",\"password\":\"Temp#12345\",\"name\":\"Deploy User\"}" || true)
            echo "$CUSR" | sed -n '1,120p'
            echo '--- CRUD smoke done ---'

      - name: Post-deploy admin categories smoke (create + list)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.allow_mutating_smokes == true }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST || vars.VPS_HOST || env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key_path: ${{ env.SSH_KEY_PATH }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ env.SELECTED_SSH_PORT || env.SSH_PORT || secrets.VPS_PORT || vars.VPS_PORT || 22 }}
          timeout: 180s
          command_timeout: 30m
          script: |
            set -Eeuo pipefail
            EMAIL='${{ secrets.ADMIN_EMAIL || 'admin@example.com' }}'
            PASS='${{ secrets.ADMIN_PASSWORD || 'admin123' }}'
            SECRET='${{ secrets.MAINTENANCE_SECRET || vars.MAINTENANCE_SECRET }}'
            echo '--- Login to API (JSON, local first) ---'
            BODY=/tmp/login.body
            curl -sS -H 'content-type: application/json' -X POST http://127.0.0.1:4000/api/admin/auth/login --data "{\"email\":\"$EMAIL\",\"password\":\"$PASS\",\"remember\":true}" -o "$BODY" || true
            if ! grep -q '"token":' "$BODY" 2>/dev/null; then
              echo 'Local login failed, trying public API...'
              curl -k -sS -H 'content-type: application/json' -X POST https://api.jeeey.com/api/admin/auth/login --data "{\"email\":\"$EMAIL\",\"password\":\"$PASS\",\"remember\":true}" -o "$BODY"
            fi
            TOKEN=$(grep -o '"token":"[^"]\+"' "$BODY" | head -n1 | sed 's/.*"token":"\([^"]\+\)".*/\1/') || true
            if [ -z "$TOKEN" ]; then echo 'Missing token from login response'; head -n 40 "$BODY"; exit 1; fi
            if [ -n "$SECRET" ]; then
              echo '--- Ensure Category SEO columns (maintenance) ---'
              curl -sS -H "x-maintenance-secret: $SECRET" -X POST http://127.0.0.1:4000/api/admin/maintenance/ensure-category-seo -o /tmp/ens.body || true
              if ! grep -q 'ok' /tmp/ens.body 2>/dev/null; then
                echo 'Local ensure failed, trying public API...'
                curl -k -sS -H "x-maintenance-secret: $SECRET" -X POST https://api.jeeey.com/api/admin/maintenance/ensure-category-seo -o /tmp/ens.body || true
              fi
              head -n 1 /tmp/ens.body || true
            fi
            echo '--- Create category ---'
            TS=$(date +%s)
            BODY=$(printf '{"name":"SmokeCat %s","slug":"smoke-%s"}' "$TS" "$TS")
            CODE=$(curl -sS -w '%{http_code}' -o /tmp/cat.body -H 'content-type: application/json' -H "Authorization: Bearer $TOKEN" -X POST http://127.0.0.1:4000/api/admin/categories --data "$BODY" || true)
            if [ "$CODE" != "200" ]; then
              echo 'Local create failed, trying public API...'
              CODE=$(curl -k -sS -w '%{http_code}' -o /tmp/cat.body -H 'content-type: application/json' -H "Authorization: Bearer $TOKEN" -X POST https://api.jeeey.com/api/admin/categories --data "$BODY" || true)
            fi
            head -n 2 /tmp/cat.body | sed -n '1,2p'
            if [ "$CODE" != "200" ]; then echo "Category create failed: $CODE"; cat /tmp/cat.body; echo '=== API logs (tail) ==='; journalctl -u ecom-api --no-pager -n 120 || true; exit 1; fi
            echo '--- List categories (search=SmokeCat) ---'
            curl -sS -H "Authorization: Bearer $TOKEN" 'http://127.0.0.1:4000/api/admin/categories?search=SmokeCat' | sed -n '1,200p' || curl -k -sS -H "Authorization: Bearer $TOKEN" 'https://api.jeeey.com/api/admin/categories?search=SmokeCat' | sed -n '1,200p'

      - name: Post-deploy admin categories delete smoke (create 3 → bulk-delete → verify)
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.allow_mutating_smokes == true) || github.event_name == 'push' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST || vars.VPS_HOST || env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key_path: ${{ env.SSH_KEY_PATH }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ env.SELECTED_SSH_PORT || env.SSH_PORT || secrets.VPS_PORT || vars.VPS_PORT || 22 }}
          timeout: 240s
          command_timeout: 15m
          debug: true
          script_stop: true
          script: |
            set -Eeuxo pipefail
            EMAIL='${{ secrets.ADMIN_EMAIL || 'admin@example.com' }}'
            PASS='${{ secrets.ADMIN_PASSWORD || 'admin123' }}'
            echo '--- Running delete smoke via Node (local filesystem) ---'
            cd /var/www/ecom
            node -e "process.env.ADMIN_EMAIL='${EMAIL}';process.env.ADMIN_PASSWORD='${PASS}';" scripts/ci/smoke-category-delete.mjs

      - name: External HTTPS smoke tests (retry)
        if: ${{ env.HAVE_SSH == '1' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST || vars.VPS_HOST || env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key_path: ${{ env.SSH_KEY_PATH }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ env.SELECTED_SSH_PORT || env.SSH_PORT || secrets.VPS_PORT || vars.VPS_PORT || 22 }}
          timeout: 240s
          command_timeout: 20m
          debug: true
          script_stop: true
          script: |
            set -ex
            doms=("https://jeeey.com" "https://admin.jeeey.com" "https://m.jeeey.com" "https://api.jeeey.com/health")
            for url in "${doms[@]}"; do
              echo "-- Smoke: $url"
              ok=0
              for i in $(seq 1 18); do
                code=$(curl -L -k -s -D /tmp/headers.txt -o /tmp/body.txt -w '%{http_code}' "$url" || true)
                if [ "$code" = "200" ] || [ "$code" = "204" ] || [ "$code" = "301" ] || [ "$code" = "302" ] || [ "$code" = "307" ] || [ "$code" = "308" ]; then ok=1; break; fi
                sleep 4
              done
              if [ "$ok" != "1" ]; then
                echo "Smoke failed for $url. Recent nginx errors:"
                journalctl -u nginx --no-pager -n 120 || true
                echo '--- Response headers ---'
                cat /tmp/headers.txt || true
                echo '--- Body (first 200 bytes) ---'
                head -c 200 /tmp/body.txt || true
                exit 1
              fi
            done

      - name: Post-deploy category delete proof (always)
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST || vars.VPS_HOST || env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key_path: ${{ env.SSH_KEY_PATH }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ env.SELECTED_SSH_PORT || env.SSH_PORT || secrets.VPS_PORT || vars.VPS_PORT || 22 }}
          timeout: 240s
          command_timeout: 15m
          debug: true
          script_stop: true
          script: |
            set -Eeuxo pipefail
            EMAIL='${{ secrets.ADMIN_EMAIL || 'admin@example.com' }}'
            PASS='${{ secrets.ADMIN_PASSWORD || 'admin123' }}'
            echo '--- Login (local API preferred) ---'
            BODY=/tmp/login.body
            curl -sS -H 'content-type: application/json' -X POST http://127.0.0.1:4000/api/admin/auth/login --data "{\"email\":\"$EMAIL\",\"password\":\"$PASS\",\"remember\":true}" -o "$BODY" || true
            if ! grep -q '"token":' "$BODY" 2>/dev/null; then
              curl -k -sS -H 'content-type: application/json' -X POST https://api.jeeey.com/api/admin/auth/login --data "{\"email\":\"$EMAIL\",\"password\":\"$PASS\",\"remember\":true}" -o "$BODY" || true
            fi
            TOKEN=$(grep -o '"token":"[^"]\+"' "$BODY" | head -n1 | sed 's/.*"token":"\([^"]\+\)".*/\1/') || true
            [ -n "$TOKEN" ] || { echo 'Login failed: missing token'; head -n 40 "$BODY"; exit 1; }
            echo '--- Create temp category ---'
            TS=$(date +%s)
            DATA=$(printf '{"name":"DelProbe %s","slug":"delprobe-%s"}' "$TS" "$TS")
            CODE=$(curl -sS -w '%{http_code}' -o /tmp/cat.create -H 'content-type: application/json' -H "Authorization: Bearer $TOKEN" -X POST http://127.0.0.1:4000/api/admin/categories --data "$DATA" || true)
            if [ "$CODE" != "200" ]; then
              CODE=$(curl -k -sS -w '%{http_code}' -o /tmp/cat.create -H 'content-type: application/json' -H "Authorization: Bearer $TOKEN" -X POST https://api.jeeey.com/api/admin/categories --data "$DATA" || true)
            fi
            [ "$CODE" = "200" ] || { echo "Create failed: $CODE"; cat /tmp/cat.create; exit 1; }
            ID=$(grep -o '"id":"[^"]\+"' /tmp/cat.create | head -n1 | sed 's/.*"id":"\([^"]\+\)".*/\1/') || true
            [ -n "$ID" ] || { echo 'Create missing id'; cat /tmp/cat.create; exit 1; }
            echo "created: $ID"
            echo '--- Bulk delete temp category ---'
            PAY=$(printf '{"ids":["%s"]}' "$ID")
            CODE=$(curl -sS -w '%{http_code}' -o /tmp/cat.del -H 'content-type: application/json' -H "Authorization: Bearer $TOKEN" -X POST http://127.0.0.1:4000/api/admin/categories/bulk-delete --data "$PAY" || true)
            if [ "$CODE" != "200" ]; then
              CODE=$(curl -k -sS -w '%{http_code}' -o /tmp/cat.del -H 'content-type: application/json' -H "Authorization: Bearer $TOKEN" -X POST https://api.jeeey.com/api/admin/categories/bulk-delete --data "$PAY" || true)
            fi
            [ "$CODE" = "200" ] || { echo "Delete failed: $CODE"; cat /tmp/cat.del; exit 1; }
            if ! grep -q '"deleted":' /tmp/cat.del; then echo 'Missing deleted count in response'; cat /tmp/cat.del; exit 1; fi
            echo '--- Verify not found by search ---'
            OUT=$(curl -sS -H "Authorization: Bearer $TOKEN" "http://127.0.0.1:4000/api/admin/categories?search=$ID" || curl -k -sS -H "Authorization: Bearer $TOKEN" "https://api.jeeey.com/api/admin/categories?search=$ID" || true)
            echo "$OUT" | grep -q '"categories"' || { echo 'List response malformed'; echo "$OUT"; exit 1; }
            if echo "$OUT" | grep -q "$ID"; then echo 'Category still appears in list after deletion'; echo "$OUT"; exit 1; fi
            echo 'Category delete proof OK'

      - name: Admin console production smoke (pages + login)
        env:
          ADMIN_URL: https://admin.jeeey.com
          API_URL: https://api.jeeey.com
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL || 'admin@example.com' }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD || 'admin123' }}
        run: |
          set -e
          node scripts/ci/admin-console-prod-smoke.mjs || { echo 'Prod admin smoke failed'; exit 1; }

      - name: Print service logs (admin & web)
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST || vars.VPS_HOST || env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key_path: ${{ env.SSH_KEY_PATH }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          timeout: 180s
          command_timeout: 20m
          script: |
            set -e
            echo '=== ecom-admin logs (tail) ==='
            journalctl -u ecom-admin --no-pager -n 200 || true
            echo '=== ecom-web logs (tail) ==='
            journalctl -u ecom-web --no-pager -n 200 || true
        continue-on-error: true