name: Deploy to VPS (SSH)

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      path:
        description: "Remote path"
        required: true
        default: "/var/www/ecom"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install pnpm
        run: corepack enable && corepack prepare pnpm@9 --activate
      - name: Archive project (use git archive to avoid file change warnings)
        run: |
          git config --global core.autocrlf false
          git archive --format=tar.gz -o app.tar.gz HEAD
      - name: Copy to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "app.tar.gz"
          target: "/root/"
      - name: Remote deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            PATH_ON_HOST=${{ github.event.inputs.path || '/var/www/ecom' }}
            mkdir -p "$PATH_ON_HOST"
            tar -xzf /root/app.tar.gz -C "$PATH_ON_HOST"
            cd "$PATH_ON_HOST"
            export ADMIN_EMAIL="${ADMIN_EMAIL:-admin@example.com}"
            export ADMIN_PASSWORD="${ADMIN_PASSWORD:-admin123}"
            bash infra/scripts/deploy.sh "$PATH_ON_HOST"
            echo '--- Install Nginx config (jeeey.conf) ---'
            if [ -f infra/nginx/jeeey.conf.tpl ]; then
              DOMAIN_ROOT="jeeey.com"
              TPL=$(cat infra/nginx/jeeey.conf.tpl)
              echo "$TPL" | sed "s/jeeey.com/${DOMAIN_ROOT}/g" > /etc/nginx/sites-available/jeeey.conf
              ln -sf /etc/nginx/sites-available/jeeey.conf /etc/nginx/sites-enabled/jeeey.conf
              nginx -t && systemctl reload nginx || true
            fi

      - name: Post-deploy smoke (health, login, static, services)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -Eeuo pipefail
            ROOT="${{ github.event.inputs.path || '/var/www/ecom' }}"
            echo '--- Restart admin service to load latest build ---'
            systemctl reset-failed ecom-admin || true
            systemctl try-restart ecom-admin || true
            echo '--- Wait for admin to listen on 3001 (local) ---'
            ok=0
            for i in $(seq 1 40); do
              code=$(curl -s -o /dev/null -w '%{http_code}' http://127.0.0.1:3001/ || true)
              if [ "$code" = "200" ] || [ "$code" = "301" ] || [ "$code" = "302" ] || [ "$code" = "307" ] || [ "$code" = "308" ]; then
                echo "admin local ok: $code"; ok=1; break
              fi
              sleep 1
            done
            if [ "$ok" != "1" ]; then
              echo 'Admin did not become ready locally. Recent logs:'
              journalctl -u ecom-admin --no-pager -n 200 || true
              exit 1
            fi
            echo '--- Nginx config test ---'
            nginx -t
            echo '--- Services status ---'
            for s in ecom-api ecom-admin ecom-web; do systemctl is-active --quiet "$s" && echo "$s: active" || (echo "$s: inactive"; exit 1); done
            echo '--- Health checks ---'
            curl -fsS https://api.jeeey.com/health | head -n1
            code=$(curl -ksSI https://admin.jeeey.com/ | sed -n '1p' | awk '{print $2}')
            case "$code" in 200|301|302|307|308) echo "admin status ok: $code";; *) echo "admin bad status: $code"; exit 1;; esac
            echo '--- Wait for web to listen on 3000 (local) ---'
            ok=0
            for i in $(seq 1 40); do
              wcode=$(curl -s -o /dev/null -w '%{http_code}' http://127.0.0.1:3000/ || true)
              if [ "$wcode" = "200" ] || [ "$wcode" = "301" ] || [ "$wcode" = "302" ] || [ "$wcode" = "307" ] || [ "$wcode" = "308" ]; then
                echo "web local ok: $wcode"; ok=1; break
              fi
              sleep 1
            done
            if [ "$ok" != "1" ]; then
              echo 'Web did not become ready locally. Recent logs:'
              journalctl -u ecom-web --no-pager -n 200 || true
            fi
            echo '--- Ensure admin exists & JSON login ---'
            set +e
            JSON_STATUS=$(curl -ksS -o /dev/null -w '%{http_code}' -X POST https://api.jeeey.com/api/admin/auth/login -H 'content-type: application/json' --data '{"email":"admin@example.com","password":"admin123","remember":true}')
            set -e
            if [ "$JSON_STATUS" != "200" ]; then
              echo 'Admin login failed, attempting maintenance create-admin...'
              . "$ROOT/.env.api" || true
              curl -ksS -X POST https://api.jeeey.com/api/admin/maintenance/create-admin \
                -H "x-maintenance-secret: ${MAINTENANCE_SECRET:-}" -H 'content-type: application/json' \
                --data '{"email":"admin@example.com","password":"admin123","name":"Admin"}' || true
              sleep 1
              JSON_STATUS=$(curl -ksS -o /dev/null -w '%{http_code}' -X POST https://api.jeeey.com/api/admin/auth/login -H 'content-type: application/json' --data '{"email":"admin@example.com","password":"admin123","remember":true}')
              [ "$JSON_STATUS" = "200" ] || (echo "JSON login still failing ($JSON_STATUS)"; exit 1)
            fi
            echo '--- Form-URLENCODED login check & Set-Cookie ---'
            set +e
            FORM_STATUS=$(curl -ksS -o /dev/null -w '%{http_code}' -X POST https://api.jeeey.com/api/admin/auth/login -H 'content-type: application/x-www-form-urlencoded' --data 'email=admin@example.com&password=admin123&remember=true')
            echo "form status: $FORM_STATUS"
            HEADERS=$(curl -ksS -D - -o /dev/null -X POST https://api.jeeey.com/api/admin/auth/login -H 'content-type: application/x-www-form-urlencoded' --data 'email=admin@example.com&password=admin123&remember=true')
            printf '%s\n' "$HEADERS" | sed -n '1,20p'
            printf '%s\n' "$HEADERS" | grep -iq '^set-cookie: .*auth_token=' && echo 'auth_token cookie issued (form)' || echo 'warning: no auth_token Set-Cookie observed (form)'
            set -e
            echo '--- Static / Next.js symlinks check ---'
            A="$ROOT/apps/admin/.next"
            # Ensure .next/static is available next to server.js in standalone
            if [ ! -e "$A/standalone/apps/admin/.next/static" ] && [ -e "$A/static" ]; then
              mkdir -p "$A/standalone/apps/admin/.next"
              ln -sfn "$A/static" "$A/standalone/apps/admin/.next/static"
              systemctl reset-failed ecom-admin || true
              systemctl try-restart ecom-admin || true
            fi
            if [ ! -e "$A/standalone/public" ]; then ln -sfn "$ROOT/apps/admin/public" "$A/standalone/public"; systemctl reset-failed ecom-admin || true; systemctl try-restart ecom-admin || true; fi
            # Web app symlinks (fix broken styles/assets on jeeey.com)
            W="$ROOT/apps/web/.next"
            if [ -d "$W" ]; then
              if [ ! -e "$W/standalone/apps/web/.next/static" ] && [ -e "$W/static" ]; then
                mkdir -p "$W/standalone/apps/web/.next"
                ln -sfn "$W/static" "$W/standalone/apps/web/.next/static"
                systemctl reset-failed ecom-web || true
                systemctl try-restart ecom-web || true
              fi
              if [ ! -e "$W/standalone/public" ]; then ln -sfn "$ROOT/apps/web/public" "$W/standalone/public"; systemctl reset-failed ecom-web || true; systemctl try-restart ecom-web || true; fi
            fi
            echo 'Smoke checks passed.'

      - name: Print service logs (admin & web)
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo '=== ecom-admin logs (tail) ==='
            journalctl -u ecom-admin --no-pager -n 200 || true
            echo '=== ecom-web logs (tail) ==='
            journalctl -u ecom-web --no-pager -n 200 || true