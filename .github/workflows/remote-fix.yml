name: Remote Fix and Diagnose VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  remote_fix:
    name: SSH Fix & Diagnose
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Prepare SSH key
        env:
          VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
          VPS_SSH_KEY_B64: ${{ secrets.VPS_SSH_KEY_B64 }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_PORT: ${{ secrets.VPS_PORT }}
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          if [ -n "${VPS_SSH_KEY_B64:-}" ]; then
            echo "$VPS_SSH_KEY_B64" | base64 -d > ~/.ssh/id_ed25519
          else
            # Preserve exact newlines and strip CR if present
            printf "%s" "$VPS_SSH_KEY" | sed 's/\r$//' > ~/.ssh/id_ed25519
          fi
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p ${VPS_PORT:-22} ${VPS_HOST} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Run remote fix-admin script
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_PORT: ${{ secrets.VPS_PORT }}
          CERTBOT_EMAIL: ${{ secrets.OPTIONAL_CERTBOT_EMAIL }}
        run: |
          set -euo pipefail
          SSH="ssh -i ~/.ssh/id_ed25519 -p ${VPS_PORT:-22} -o IdentitiesOnly=yes -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST}"
          # Upload and execute fix-admin.sh remotely
          $SSH 'bash -lc '
          cat > /tmp/.fix-admin.sh <<'EOF'
          #!/usr/bin/env bash
          set -euo pipefail

          PROJECT_DIR="${PROJECT_DIR:-/var/www/ecom}"
          DOMAIN_WEB="${DOMAIN_WEB:-jeeey.com}"
          DOMAIN_ADMIN="${DOMAIN_ADMIN:-admin.jeeey.com}"
          DOMAIN_API="${DOMAIN_API:-api.jeeey.com}"
          CERTBOT_EMAIL="${CERTBOT_EMAIL:-}"
          ENABLE_CERTBOT="${ENABLE_CERTBOT:-1}"
          COOKIE_DOMAIN="${COOKIE_DOMAIN:-.jeeey.com}"
          WEBROOT_DIR="${WEBROOT_DIR:-/var/www/letsencrypt}"
          NGINX_HTTP_CONF="${NGINX_HTTP_CONF:-/etc/nginx/sites-available/jeeey.conf}"
          NGINX_SSL_CONF="${NGINX_SSL_CONF:-/etc/nginx/sites-available/jeeey-ssl.conf}"

          log(){ echo "[fix-admin] $*"; }
          has(){ command -v "$1" >/dev/null 2>&1; }
          headp(){ sed -n '1,15p'; }

          [ "${EUID:-$(id -u)}" -eq 0 ] || { echo "Run as root"; exit 1; }

          export DEBIAN_FRONTEND=noninteractive
          log "Install essentials (nginx, ufw, certbot, curl)"
          apt-get update -y || true
          apt-get install -y nginx ufw certbot python3-certbot-nginx curl coreutils || true
          if ! has pm2; then if has npm; then npm i -g pm2@5 || true; fi; fi

          log "Open firewall ports 80/443 via UFW"
          if has ufw; then
            ufw allow OpenSSH >/dev/null 2>&1 || true
            ufw allow 'Nginx Full' >/dev/null 2>&1 || { ufw allow 80/tcp >/dev/null 2>&1; ufw allow 443/tcp >/dev/null 2>&1; }
            ufw --force enable >/dev/null 2>&1 || true
          fi

          log "Prepare ACME webroot: $WEBROOT_DIR"
          mkdir -p "$WEBROOT_DIR"
          chown -R www-data:www-data "$WEBROOT_DIR" || true

          log "Remove conflicting Nginx conf"
          rm -f /etc/nginx/conf.d/default.conf /etc/nginx/sites-enabled/default /etc/nginx/conf.d/jeeey.conf || true

          log "Write HTTP config (80): $NGINX_HTTP_CONF"
          cat > "$NGINX_HTTP_CONF" <<CFG
          server { listen 80; listen [::]:80; server_name $DOMAIN_WEB www.$DOMAIN_WEB; location ^~ /.well-known/acme-challenge/ { root $WEBROOT_DIR; default_type text/plain; allow all; } location / { proxy_pass http://127.0.0.1:3000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } }
          server { listen 80; listen [::]:80; server_name $DOMAIN_ADMIN; location ^~ /.well-known/acme-challenge/ { root $WEBROOT_DIR; default_type text/plain; allow all; } location / { proxy_pass http://127.0.0.1:3001; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } }
          server { listen 80; listen [::]:80; server_name $DOMAIN_API; location ^~ /.well-known/acme-challenge/ { root $WEBROOT_DIR; default_type text/plain; allow all; } location / { proxy_pass http://127.0.0.1:4000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } }
          CFG
          ln -sf "$NGINX_HTTP_CONF" "/etc/nginx/sites-enabled/$(basename "$NGINX_HTTP_CONF")"

          if [ -n "$CERTBOT_EMAIL" ] && [ "${ENABLE_CERTBOT}" = "1" ]; then
            log "Issue/Renew certs via webroot"
            certbot certonly --webroot -w "$WEBROOT_DIR" -n --agree-tos -m "$CERTBOT_EMAIL" -d "$DOMAIN_WEB" -d "www.$DOMAIN_WEB" || true
            certbot certonly --webroot -w "$WEBROOT_DIR" -n --agree-tos -m "$CERTBOT_EMAIL" -d "$DOMAIN_ADMIN" || true
            certbot certonly --webroot -w "$WEBROOT_DIR" -n --agree-tos -m "$CERTBOT_EMAIL" -d "$DOMAIN_API" || true
          else
            log "Skip certbot (no email or disabled)"
          fi

          log "Write SSL config (443): $NGINX_SSL_CONF"
          WEB_CERT_DIR="/etc/letsencrypt/live/$DOMAIN_WEB"
          ADMIN_CERT_DIR="/etc/letsencrypt/live/$DOMAIN_ADMIN"
          API_CERT_DIR="/etc/letsencrypt/live/$DOMAIN_API"
          cat > "$NGINX_SSL_CONF" <<CFG
          server { listen 443 ssl; listen [::]:443 ssl; server_name $DOMAIN_WEB www.$DOMAIN_WEB; ssl_certificate $WEB_CERT_DIR/fullchain.pem; ssl_certificate_key $WEB_CERT_DIR/privkey.pem; include /etc/letsencrypt/options-ssl-nginx.conf; ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; location / { proxy_pass http://127.0.0.1:3000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } }
          server { listen 443 ssl; listen [::]:443 ssl; server_name $DOMAIN_ADMIN; ssl_certificate $ADMIN_CERT_DIR/fullchain.pem; ssl_certificate_key $ADMIN_CERT_DIR/privkey.pem; include /etc/letsencrypt/options-ssl-nginx.conf; ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; location / { proxy_pass http://127.0.0.1:3001; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } }
          server { listen 443 ssl; listen [::]:443 ssl; server_name $DOMAIN_API; ssl_certificate $API_CERT_DIR/fullchain.pem; ssl_certificate_key $API_CERT_DIR/privkey.pem; include /etc/letsencrypt/options-ssl-nginx.conf; ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; location / { proxy_pass http://127.0.0.1:4000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } }
          CFG
          ln -sf "$NGINX_SSL_CONF" "/etc/nginx/sites-enabled/$(basename "$NGINX_SSL_CONF")"
          rm -f /etc/nginx/conf.d/jeeey.conf || true

          log "Reload Nginx"
          nginx -t
          systemctl enable nginx || true
          systemctl reload nginx || systemctl restart nginx

          log "Ensure PM2 services (web/admin/api)"
          export NODE_ENV=production
          export COOKIE_DOMAIN="$COOKIE_DOMAIN"
          pm2 list || true
          pm2 delete ecom-web || true
          pm2 delete ecom-admin || true
          pm2 delete ecom-api || true
          if [ -f "$PROJECT_DIR/infra/deploy/ecosystem.config.js" ]; then
            cp -f "$PROJECT_DIR/infra/deploy/ecosystem.config.js" /etc/pm2.ecosystem.config.js || true
            pm2 start /etc/pm2.ecosystem.config.js --only ecom-web --update-env || true
            pm2 start /etc/pm2.ecosystem.config.js --only ecom-admin --update-env || true
            pm2 start /etc/pm2.ecosystem.config.js --only ecom-api --update-env || true
            pm2 save || true
          fi
          sleep 2
          if ! ss -ltnp | grep -q ':3001'; then
            log "Port 3001 not listening, try rebuilding admin"
            if command -v corepack >/dev/null 2>&1; then corepack enable || true; fi
            if ! command -v pnpm >/dev/null 2>&1; then if command -v corepack >/dev/null 2>&1; then corepack prepare pnpm@9 --activate || true; fi; fi
            ( cd "$PROJECT_DIR" && pnpm --filter admin build ) || true
            pm2 restart ecom-admin --update-env || true
            sleep 2
          fi

          log "Diagnostics"
          echo "--- nginx -T (first 200) ---"
          nginx -T 2>&1 | sed -n '1,200p' | cat || true
          echo "--- Ports 80/443/3000/3001/4000 ---"
          ss -ltnp | egrep ':80|:443|:3000|:3001|:4000' | cat || true
          echo "--- PM2 status ---"
          pm2 status || true
          echo "--- curl 3000 ---"; curl -Is http://127.0.0.1:3000/ | head -n 10 | cat || true
          echo "--- curl 3001 ---"; curl -Is http://127.0.0.1:3001/ | head -n 10 | cat || true
          echo "--- HTTPS admin root ---"; curl -Is --resolve "$DOMAIN_ADMIN:443:127.0.0.1" "https://$DOMAIN_ADMIN/" | head -n 10 | cat || true
          echo "--- HTTPS admin finance ---"; curl -Is --resolve "$DOMAIN_ADMIN:443:127.0.0.1" "https://$DOMAIN_ADMIN/finance/revenues" | head -n 10 | cat || true
          echo "--- DNS resolve admin ---"; getent hosts "$DOMAIN_ADMIN" | cat || true
          echo "Done."
          EOF
          chmod +x /tmp/.fix-admin.sh
          sudo /tmp/.fix-admin.sh
          '

