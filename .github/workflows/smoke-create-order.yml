name: Smoke - Create Demo Order and Verify Logistics

on:
  workflow_dispatch:

jobs:
  smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare tools
        run: sudo apt-get update -y && sudo apt-get install -y jq || true

      - name: Create demo order and verify
        env:
          API_BASE: https://api.jeeey.com
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL || vars.ADMIN_EMAIL }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD || vars.ADMIN_PASSWORD }}
        run: |
          set -euo pipefail
          email="$ADMIN_EMAIL"; pass="$ADMIN_PASSWORD"
          if [ -z "$email" ] || [ -z "$pass" ]; then echo 'Missing ADMIN_EMAIL/ADMIN_PASSWORD'; exit 1; fi

          echo '--- Login ---'
          BODY=$(mktemp)
          curl -sS -H 'content-type: application/json' -X POST "$API_BASE/api/admin/auth/login" \
            --data "{\"email\":\"$email\",\"password\":\"$pass\",\"remember\":true}" -o "$BODY"
          TOKEN=$(grep -o '"token":"[^"]\+"' "$BODY" | sed 's/.*"token":"\([^"]\+\)".*/\1/')
          if [ -z "$TOKEN" ]; then echo 'Login failed'; head -n 60 "$BODY"; exit 1; fi
          AUTH="Authorization: Bearer $TOKEN"

          echo '--- Ensure product ---'
          # Create a demo category (idempotent via slug)
          TS=$(date +%s)
          curl -sS -H "$AUTH" -H 'content-type: application/json' -X POST "$API_BASE/api/admin/categories" \
            --data "{\"name\":\"SmokeCat $TS\",\"slug\":\"smoke-cat-$TS\"}" >/dev/null || true
          # Create a product
          PROD_BODY=$(mktemp)
          curl -sS -H "$AUTH" -H 'content-type: application/json' -X POST "$API_BASE/api/admin/products" \
            --data "{\"name\":\"SMOKE-P\",\"description\":\"demo\",\"price\":9.9,\"images\":[],\"stockQuantity\":5}" -o "$PROD_BODY"
          PROD_ID=$(jq -r '.product.id // empty' "$PROD_BODY" || true)
          if [ -z "$PROD_ID" ]; then
            # Fallback: read first product
            PROD_ID=$(curl -sS -H "$AUTH" "$API_BASE/api/admin/products?limit=1" | jq -r '.products[0].id // empty')
          fi
          if [ -z "$PROD_ID" ]; then echo 'No product available'; exit 1; fi

          echo '--- Create order ---'
          ORD_BODY=$(mktemp)
          curl -sS -H "$AUTH" -H 'content-type: application/json' -X POST "$API_BASE/api/admin/orders" \
            --data "{\"customer\":{\"name\":\"Smoke User\",\"email\":\"smoke+$TS@local\",\"phone\":\"\"},\"address\":{\"street\":\"Test St\"},\"items\":[{\"productId\":\"$PROD_ID\",\"quantity\":1,\"price\":9.9}]}" -o "$ORD_BODY"
          ORDER_ID=$(jq -r '.order.id // empty' "$ORD_BODY" || true)
          if [ -z "$ORDER_ID" ]; then echo 'Order create failed'; cat "$ORD_BODY"; exit 1; fi
          echo "ORDER_ID=$ORDER_ID"

          echo '--- Approve order (PAID + bootstrap legs) ---'
          curl -sS -H "$AUTH" -H 'content-type: application/json' -X POST "$API_BASE/api/admin/status/change" \
            --data "{\"entity\":\"order\",\"id\":\"$ORDER_ID\",\"action\":\"approve\"}" | sed -n '1,120p'

          echo '--- Verify pickup waiting ---'
          PICKUP=$(curl -sS -H "$AUTH" "$API_BASE/api/admin/logistics/pickup/list?status=waiting" | tee /dev/stderr)
          echo "$PICKUP" | jq ".pickup | map(select(.orderId==\"$ORDER_ID\"))" | sed -n '1,200p'

          echo '--- Verify pickup in_progress after assign ---'
          # Try to assign if a driver exists
          DRV=$(curl -sS -H "$AUTH" "$API_BASE/api/admin/drivers" | jq -r '.drivers[0].id // empty') || true
          POID=$(echo "$PICKUP" | jq -r '.pickup[0].poId // empty') || true
          if [ -n "$DRV" ] && [ -n "$POID" ]; then
            curl -sS -H "$AUTH" -H 'content-type: application/json' -X POST "$API_BASE/api/admin/status/change" \
              --data "{\"entity\":\"pickup\",\"id\":\"$POID\",\"action\":\"assign\",\"extra\":{\"driverId\":\"$DRV\"}}" | sed -n '1,80p'
            curl -sS -H "$AUTH" "$API_BASE/api/admin/logistics/pickup/list?status=in_progress" | sed -n '1,120p'
          fi

          echo '--- Done ---'

