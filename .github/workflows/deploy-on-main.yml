name: Deploy on push to main

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Archive project
        if: false
        run: git archive --format=tar.gz -o app.tar.gz HEAD

      - name: Copy to server (scp)
        if: false
        uses: appleboy/scp-action@v0.1.7
        with:
          host: srv995016.hstgr.cloud
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "app.tar.gz"
          target: "/root/"

      - name: Bootstrap and deploy on VPS (ssh)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: srv995016.hstgr.cloud
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            ROOT=/var/www/ecom
            DOMAIN_ROOT=jeeey.com
            ADMIN_SUB=admin.jeeey.com
            API_SUB=api.jeeey.com
            EMAIL=admin@jeeey.com

            # Pull code on server via git instead of SCP
            apt-get update >/dev/null 2>&1 || true
            apt-get install -y git >/dev/null 2>&1 || true
            if [ -d "$ROOT/.git" ]; then
              cd "$ROOT"
              git fetch --all --prune
              git reset --hard origin/main
            else
              rm -rf "$ROOT"
              git clone --depth=1 https://github.com/wwwrwww65-netizen/1111 "$ROOT"
            fi

            bash "$ROOT/infra/scripts/setup-server.sh"

            # Generate secrets and Postgres (idempotent - don't overwrite existing .env.api)
            JWT_SECRET=$(openssl rand -hex 32)
            MAINT_SECRET=$(openssl rand -hex 32)
            DB_USER=jeeey
            DB_NAME=jeeey
            DB_PASS=$(openssl rand -hex 16)
            sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname='${DB_USER}'" | grep -q 1 || sudo -u postgres psql -c "CREATE USER \"${DB_USER}\" WITH PASSWORD '${DB_PASS}';"
            sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw "${DB_NAME}" || sudo -u postgres psql -c "CREATE DATABASE \"${DB_NAME}\" OWNER \"${DB_USER}\";"
            if [ ! -f "$ROOT/.env.api" ]; then
              DB_URL="postgresql://${DB_USER}:${DB_PASS}@127.0.0.1:5432/${DB_NAME}"
              cat > "$ROOT/.env.api" <<EOF
            NODE_ENV=production
            PORT=4000
            JWT_SECRET=${JWT_SECRET}
            DATABASE_URL=${DB_URL}
            DIRECT_URL=${DB_URL}
            COOKIE_DOMAIN=.${DOMAIN_ROOT}
            MAINTENANCE_SECRET=${MAINT_SECRET}
            API_RUN_ENSURE_SCHEMA=1
            EOF
            fi

            cat > "$ROOT/.env.web" <<EOF
            NODE_ENV=production
            NEXT_PUBLIC_APP_URL=https://${DOMAIN_ROOT}
            NEXT_PUBLIC_ADMIN_URL=https://${ADMIN_SUB}
            NEXT_PUBLIC_API_BASE_URL=https://${API_SUB}
            NEXT_PUBLIC_TRPC_URL=https://${API_SUB}/trpc
            EOF

            # Optionally set admin seed creds for deploy script
            export ADMIN_EMAIL="admin@example.com"
            export ADMIN_PASSWORD="admin123"

            # Systemd units
            cp "$ROOT/infra/systemd/ecom-api.service" /etc/systemd/system/ecom-api.service
            cp "$ROOT/infra/systemd/ecom-web.service" /etc/systemd/system/ecom-web.service
            cp "$ROOT/infra/systemd/ecom-admin.service" /etc/systemd/system/ecom-admin.service
            systemctl daemon-reload

            # Build & restart services
            corepack enable || true
            corepack prepare pnpm@9 --activate || true
            bash "$ROOT/infra/scripts/deploy.sh" "$ROOT"
            systemctl enable --now ecom-api ecom-web ecom-admin || true

            # Nginx + TLS
            sed "s/jeeey.com/${DOMAIN_ROOT}/g" "$ROOT/infra/nginx/jeeey.conf.tpl" > /etc/nginx/sites-available/jeeey.conf
            ln -sf /etc/nginx/sites-available/jeeey.conf /etc/nginx/sites-enabled/jeeey.conf
            nginx -t && systemctl reload nginx || true
            certbot --nginx -d "${DOMAIN_ROOT}" -d "www.${DOMAIN_ROOT}" -d "${ADMIN_SUB}" -d "${API_SUB}" -m "${EMAIL}" --agree-tos -n || true

            # Firewall
            ufw allow OpenSSH || true
            ufw allow 80 || true
            ufw allow 443 || true
            yes | ufw enable || true

            echo "Deployed: https://${DOMAIN_ROOT} https://${ADMIN_SUB} https://${API_SUB}"
