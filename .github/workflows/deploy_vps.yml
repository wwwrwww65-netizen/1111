name: deploy_vps

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: deploy_vps-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Prime known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H 72.60.92.17 >> ~/.ssh/known_hosts 2>/dev/null

      - name: Rsync repository to VPS (/var/www/ecom)
        run: |
          set +e
          rsync -az --delete --delete-after --omit-dir-times --no-perms --no-owner --no-group \
            --exclude=.git \
            --exclude=node_modules \
            --exclude=.next \
            --exclude=dist \
            --exclude=.pnpm-store \
            --exclude=.cache \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ root@72.60.92.17:/var/www/ecom
          rc=$?
          if [ $rc -ne 0 ] && [ $rc -ne 24 ]; then exit $rc; fi

      - name: Prepare API env file on VPS (preserve JWT/MAINTENANCE)
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
        run: |
          set -e
          tmpfile=$(mktemp)
          : > "$tmpfile"
          [ -n "${DATABASE_URL}" ] && echo "DATABASE_URL=${DATABASE_URL}" >> "$tmpfile"
          [ -n "${DIRECT_URL}" ] && echo "DIRECT_URL=${DIRECT_URL}" >> "$tmpfile"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "mkdir -p /var/www/ecom"
          scp -o StrictHostKeyChecking=no "$tmpfile" root@72.60.92.17:/var/www/ecom/.env.api.tmp
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 bash -s <<'EOF'
          set -e
          F=/var/www/ecom/.env.api
          T=/var/www/ecom/.env.api.tmp
          touch "$F"; touch "$T"
          # Merge existing F with overrides from T, preserving unknown keys
          cp "$F" "$F.merged" || :
          # Apply overrides from tmp (DATABASE_URL, DIRECT_URL, etc.)
          while IFS= read -r line; do
            [ -z "$line" ] && continue
            key="${line%%=*}"
            val="${line#*=}"
            sed -i -E "/^${key}=.*/d" "$F.merged" || true
            printf '%s\n' "${key}=${val}" >> "$F.merged"
          done < "$T"
          # Ensure JWT/MAINTENANCE exist
          grep -q '^JWT_SECRET=' "$F.merged" || echo "JWT_SECRET=$(openssl rand -hex 32 || cat /proc/sys/kernel/random/uuid)" >> "$F.merged"
          grep -q '^MAINTENANCE_SECRET=' "$F.merged" || echo "MAINTENANCE_SECRET=deploy-$(date +%s)" >> "$F.merged"
          mv "$F.merged" "$F"
          rm -f "$T"
          chown root:root "$F"; chmod 600 "$F"
          EOF

      - name: Build and restart services on VPS
        run: |
          set -e
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 bash -s <<'REMOTE'
          set -e
          export PRISMA_IGNORE_ENV_CONFLICT=1
          export NEXT_CACHE_DISABLED=1
          export TURBO_FORCE=1
          export PATH="/usr/local/bin:/usr/bin:$PATH"
          cd /var/www/ecom
          corepack enable || true
          corepack prepare pnpm@9.15.9 --activate || corepack prepare pnpm@9 --activate || true
          pnpm -v || npm i -g pnpm@9
          # Install deps (include dev for builds)
          CI=1 NODE_ENV=development pnpm install --frozen-lockfile=false --prod=false --force | cat
          # Build packages
          export NODE_ENV=production
          pnpm --filter @repo/db build | cat
          rm -rf apps/admin/.next apps/web/.next || true
          pnpm --filter admin build | cat
          pnpm --filter web build | cat
          pnpm --filter @repo/api build | cat
          # Ensure DB schema is in place using Prisma
          if [ -d packages/db ]; then
            (cd packages/db && set -a; . /var/www/ecom/.env.api; set +a; npx -y prisma db push | cat) || true
          fi
          # Prepare standalone: ensure Next.js static/public symlinks exist before restart
          if [ -d apps/admin/.next ]; then
            A=apps/admin/.next; S=apps/admin/.next/standalone/apps/admin/.next;
            mkdir -p "$S";
            if [ -d "$A/static" ]; then ln -sfn "$(readlink -f "$A/static")" "$S/static"; fi
            ln -sfn "$(readlink -f apps/admin/public)" apps/admin/.next/standalone/public || true
          fi
          if [ -d apps/web/.next ]; then
            W=apps/web/.next; SW=apps/web/.next/standalone/apps/web/.next;
            mkdir -p "$SW";
            if [ -d "$W/static" ]; then ln -sfn "$(readlink -f "$W/static")" "$SW/static"; fi
            ln -sfn "$(readlink -f apps/web/public)" apps/web/.next/standalone/public || true
          fi
          # Update systemd units
          install -m 0644 -T infra/systemd/ecom-admin.service /etc/systemd/system/ecom-admin.service
          install -m 0644 -T infra/systemd/ecom-api.service /etc/systemd/system/ecom-api.service
          install -m 0644 -T infra/systemd/ecom-web.service /etc/systemd/system/ecom-web.service
          # Prefer Next.js standalone server.js paths for robustness
          ADMIN_JS=$(find /var/www/ecom/apps/admin/.next/standalone -maxdepth 3 -type f -name server.js -print -quit 2>/dev/null || true)
          WEB_JS=$(find /var/www/ecom/apps/web/.next/standalone -maxdepth 3 -type f -name server.js -print -quit 2>/dev/null || true)
          if [ -n "$ADMIN_JS" ] && [ -f /etc/systemd/system/ecom-admin.service ]; then
            sed -i -E "s|^ExecStart=.*|ExecStart=/usr/bin/node $ADMIN_JS|" /etc/systemd/system/ecom-admin.service || true
          fi
          if [ -n "$WEB_JS" ] && [ -f /etc/systemd/system/ecom-web.service ]; then
            sed -i -E "s|^ExecStart=.*|ExecStart=/usr/bin/node $WEB_JS|" /etc/systemd/system/ecom-web.service || true
          fi
          systemctl daemon-reload
          systemctl restart ecom-api || (systemctl reset-failed ecom-api && systemctl start ecom-api) || true
          systemctl restart ecom-admin || (systemctl reset-failed ecom-admin && systemctl start ecom-admin) || true
          systemctl restart ecom-web || (systemctl reset-failed ecom-web && systemctl start ecom-web) || true
          # Nginx HTTP-only config for initial bring-up
          install -m 0644 -T infra/deploy/nginx/jeeey.conf /etc/nginx/sites-available/jeeey.conf
          ln -sf /etc/nginx/sites-available/jeeey.conf /etc/nginx/sites-enabled/jeeey.conf
          rm -f /etc/nginx/sites-enabled/default /etc/nginx/conf.d/default.conf || true
          nginx -t
          systemctl reload nginx
          REMOTE

      - name: Enable HTTPS and swap Nginx to TLS config
        env:
          CERTBOT_EMAIL: ${{ secrets.CERTBOT_EMAIL }}
        run: |
          set -e
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "bash -lc \"set -e; cd /var/www/ecom; CERTBOT_EMAIL='${CERTBOT_EMAIL}' bash infra/deploy/enable-https.sh; install -m 0644 -T infra/nginx/jeeey.conf.tpl /etc/nginx/sites-available/jeeey.conf; ln -sf /etc/nginx/sites-available/jeeey.conf /etc/nginx/sites-enabled/jeeey.conf; nginx -t; systemctl reload nginx; sleep 2; ss -ltn | egrep ':443 ' || true; curl -ksS -I https://jeeey.com | sed -n 1p || true;\""

      - name: Verify deployment (services, ports, endpoints)
        run: |
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== services ==='; systemctl is-active ecom-api ecom-admin nginx || true"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== ports ==='; ss -ltnp 2>/dev/null | egrep ':80 |:443 |:3000 |:3001 |:4000 ' || true"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== nginx conflicts (should be empty warnings) ==='; nginx -T 2>/dev/null | grep -En 'server_name\s+.*jeeey\.com' | sed -n 1,200p || true"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== admin HEAD / (expect 200/307) ==='; curl -s -I https://admin.jeeey.com | sed -n 1,15p || true"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== api health ==='; curl -s -i https://api.jeeey.com/health | sed -n 1,15p || true"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== login attempt to API (expect Set-Cookie auth_token) ==='; curl -s -D - -o /dev/null -X POST -H 'content-type: application/x-www-form-urlencoded' --data-urlencode email=admin@example.com --data-urlencode password=admin123 https://api.jeeey.com/api/admin/auth/login | sed -n 1,60p || true"

      - name: API login JSON + fallback create-admin + form cookie check
        run: |
          set -e
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 bash -s <<'CHECK'
          set -e
          ROOT=/var/www/ecom
          echo '--- JSON login ---'
          JSON_STATUS=$(curl -ksS -o /dev/null -w '%{http_code}' -X POST https://api.jeeey.com/api/admin/auth/login -H 'content-type: application/json' --data '{"email":"admin@example.com","password":"admin123","remember":true}')
          echo "json status: $JSON_STATUS"
          if [ "$JSON_STATUS" != "200" ]; then
            echo 'Admin login failed, attempting maintenance create-admin...'
            . "$ROOT/.env.api" || true
            curl -ksS -X POST https://api.jeeey.com/api/admin/maintenance/create-admin -H "x-maintenance-secret: ${MAINTENANCE_SECRET:-}" -H 'content-type: application/json' --data '{"email":"admin@example.com","password":"admin123","name":"Admin"}' || true
            sleep 1
            JSON_STATUS=$(curl -ksS -o /dev/null -w '%{http_code}' -X POST https://api.jeeey.com/api/admin/auth/login -H 'content-type: application/json' --data '{"email":"admin@example.com","password":"admin123","remember":true}')
            echo "json status (retry): $JSON_STATUS"
            [ "$JSON_STATUS" = "200" ] || (echo "JSON login still failing ($JSON_STATUS)"; exit 1)
          fi
          echo '--- Form-URLENCODED login check & Set-Cookie ---'
          set +e
          FORM_STATUS=$(curl -ksS -o /dev/null -w '%{http_code}' -X POST https://api.jeeey.com/api/admin/auth/login -H 'content-type: application/x-www-form-urlencoded' --data 'email=admin@example.com&password=admin123&remember=true')
          echo "form status: $FORM_STATUS"
          HEADERS=$(curl -ksS -D - -o /dev/null -X POST https://api.jeeey.com/api/admin/auth/login -H 'content-type: application/x-www-form-urlencoded' --data 'email=admin@example.com&password=admin123&remember=true')
          printf '%s\n' "$HEADERS" | sed -n '1,20p'
          printf '%s\n' "$HEADERS" | grep -iq '^set-cookie: .*auth_token=' && echo 'auth_token cookie issued (form)' || echo 'warning: no auth_token Set-Cookie observed (form)'
          set -e
          CHECK

      - name: Upload deployment logs (debug)
        if: always()
        run: |
          echo "No local logs; remote checks printed above."

