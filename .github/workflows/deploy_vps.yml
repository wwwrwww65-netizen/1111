name: DEPRECATED deploy_vps (use Deploy to VPS (SSH))

on:
  workflow_dispatch: {}

concurrency:
  group: deploy_vps-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    if: false
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Prime known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H 72.60.92.17 >> ~/.ssh/known_hosts 2>/dev/null

      - name: Bootstrap /var/www/ecom/.env.api (idempotent)
        run: |
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 bash -s <<'ENVF'
          set -e
          ROOT=/var/www/ecom
          mkdir -p "$ROOT"
          F="$ROOT/.env.api"
          if [ ! -s "$F" ]; then
            JR=$(openssl rand -hex 32 || echo 000)
            MS="deploy-$(date +%s)"
            printf '%s\n' \
              "NODE_ENV=production" \
              "COOKIE_DOMAIN=.jeeey.com" \
              "NEXT_PUBLIC_ADMIN_URL=https://admin.jeeey.com" \
              "NEXT_PUBLIC_APP_URL=https://jeeey.com" \
              "JWT_SECRET=$JR" \
              "MAINTENANCE_SECRET=$MS" \
              > "$F"
            chmod 600 "$F"
          fi
          DB="${{ secrets.DATABASE_URL }}"; if [ -n "$DB" ] && ! grep -q '^DATABASE_URL=' "$F"; then echo "DATABASE_URL=$DB" >> "$F"; fi
          DU="${{ secrets.DIRECT_URL }}"; if [ -n "$DU" ] && ! grep -q '^DIRECT_URL=' "$F"; then echo "DIRECT_URL=$DU" >> "$F"; fi
          ls -l "$F" | cat
          ENVF

      # Removed fragile local generation; will create/merge .env.api in Remote deploy step below

      - name: Rsync repository to VPS (/var/www/ecom)
        run: |
          set +e
          rsync -az --delete --delete-after --omit-dir-times --no-perms --no-owner --no-group \
            --exclude=.git \
            --exclude=node_modules \
            --exclude=.next \
            --exclude=dist \
            --exclude=.pnpm-store \
            --exclude=.cache \
            --exclude=.env.api \
            --exclude=packages/api/.env \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ root@72.60.92.17:/var/www/ecom
          rc=$?
          if [ $rc -ne 0 ] && [ $rc -ne 24 ]; then exit $rc; fi

      - name: Prepare and install deps on VPS (fix prisma engines & next bin)
        run: |
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 bash -s <<'DEPS'
          set -e
          cd /var/www/ecom
          # Stabilize pnpm on monorepo: use hoisted node-linker and local store
          corepack enable || true
          corepack prepare pnpm@9 --activate || true
          pnpm config set store-dir /var/www/ecom/.pnpm-store
          pnpm config set node-linker hoisted
          pnpm config set package-import-method copy
          export PRISMA_CLI_QUERY_ENGINE_TYPE=binary
          export PRISMA_ENGINES_CHECKSUM_IGNORE_MISSING=1
          export PRISMA_CLI_QUERY_ENGINE_BINARY=/var/www/ecom/node_modules/.pnpm/prisma@5.14.0/node_modules/prisma/libquery_engine-debian-openssl-3.0.x.so.node
          export npm_config_ignore_scripts=true
          export NPM_CONFIG_IGNORE_SCRIPTS=true
          export PUPPETEER_SKIP_DOWNLOAD=true
          export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
          CI=1 NODE_ENV=development pnpm install -w --frozen-lockfile=false --prod=false --force --ignore-scripts \
            --filter ./packages/db \
            --filter ./packages/api \
            --filter ./apps/web \
            --filter ./apps/admin | cat
          # Rebuild native deps and prisma engines explicitly (no postinstall)
          pnpm rebuild @prisma/client prisma esbuild puppeteer || true
          npx prisma --version || true
          # Ensure next binary symlinks exist
          for app in apps/admin apps/web; do
            if [ ! -x "$app/node_modules/.bin/next" ] && [ -x node_modules/.bin/next ]; then
              mkdir -p "$app/node_modules/.bin"; ln -sf "$(readlink -f node_modules/.bin/next)" "$app/node_modules/.bin/next" || true
            fi
          done
          DEPS

      - name: Build and restart services on VPS
        run: |
          set -e
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 bash -s <<'REMOTE'
          set -e
          export PRISMA_IGNORE_ENV_CONFLICT=1
          export NEXT_CACHE_DISABLED=1
          export TURBO_FORCE=1
          export PATH="/usr/local/bin:/usr/bin:$PATH"
          cd /var/www/ecom
          # Build packages
          export NODE_ENV=production
          pnpm --filter @repo/db build | cat
          rm -rf apps/admin/.next apps/web/.next || true
          pnpm --filter admin build | cat
          pnpm --filter web build | cat
          pnpm --filter @repo/api build | cat
          # Ensure DB schema is in place using Prisma
          if [ -d packages/db ]; then
            (cd packages/db && set -a; . /var/www/ecom/.env.api; set +a; npx -y prisma db push | cat) || true
          fi
          # Prepare standalone: ensure Next.js static/public symlinks exist before restart
          if [ -d apps/admin/.next ]; then
            A=apps/admin/.next; S=apps/admin/.next/standalone/apps/admin/.next;
            mkdir -p "$S";
            if [ -d "$A/static" ]; then ln -sfn "$(readlink -f "$A/static")" "$S/static"; fi
            ln -sfn "$(readlink -f apps/admin/public)" apps/admin/.next/standalone/public || true
          fi
          if [ -d apps/web/.next ]; then
            W=apps/web/.next; SW=apps/web/.next/standalone/apps/web/.next;
            mkdir -p "$SW";
            if [ -d "$W/static" ]; then ln -sfn "$(readlink -f "$W/static")" "$SW/static"; fi
            ln -sfn "$(readlink -f apps/web/public)" apps/web/.next/standalone/public || true
          fi
          # Update systemd units and restart
          install -m 0644 -T infra/systemd/ecom-admin.service /etc/systemd/system/ecom-admin.service
          install -m 0644 -T infra/systemd/ecom-api.service /etc/systemd/system/ecom-api.service
          install -m 0644 -T infra/systemd/ecom-web.service /etc/systemd/system/ecom-web.service
          systemctl daemon-reload
          systemctl restart ecom-api || (systemctl reset-failed ecom-api && systemctl start ecom-api) || true
          systemctl restart ecom-admin || (systemctl reset-failed ecom-admin && systemctl start ecom-admin) || true
          systemctl restart ecom-web || (systemctl reset-failed ecom-web && systemctl start ecom-web) || true
          # Nginx HTTP-only config
          install -m 0644 -T infra/deploy/nginx/jeeey.conf /etc/nginx/sites-available/jeeey.conf
          ln -sf /etc/nginx/sites-available/jeeey.conf /etc/nginx/sites-enabled/jeeey.conf
          rm -f /etc/nginx/sites-enabled/default /etc/nginx/conf.d/default.conf || true
          nginx -t
          systemctl reload nginx
          REMOTE

      - name: Enable HTTPS and swap Nginx to TLS config
        env:
          CERTBOT_EMAIL: ${{ secrets.CERTBOT_EMAIL }}
        run: |
          set -e
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "bash -lc \"set -e; cd /var/www/ecom; CERTBOT_EMAIL='${CERTBOT_EMAIL}' bash infra/deploy/enable-https.sh; install -m 0644 -T infra/nginx/jeeey.conf.tpl /etc/nginx/sites-available/jeeey.conf; ln -sf /etc/nginx/sites-available/jeeey.conf /etc/nginx/sites-enabled/jeeey.conf; nginx -t; systemctl reload nginx; sleep 2; ss -ltn | egrep ':443 ' || true;\""

      - name: Fallback to self-signed TLS if 443 still closed
        run: |
          set -e
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "bash -lc 'if ! ss -ltn | grep -q ":443 "; then mkdir -p /etc/ssl/local; if [ ! -f /etc/ssl/local/jeeey.crt ]; then openssl req -x509 -nodes -newkey rsa:2048 -days 365 -keyout /etc/ssl/local/jeeey.key -out /etc/ssl/local/jeeey.crt -subj "/CN=jeeey.com"; fi; install -m 0644 -T /var/www/ecom/infra/nginx/jeeey.selfsigned.conf /etc/nginx/sites-available/jeeey.conf; ln -sf /etc/nginx/sites-available/jeeey.conf /etc/nginx/sites-enabled/jeeey.conf; nginx -t && systemctl reload nginx; fi'"

      - name: Verify deployment (services, ports, endpoints)
        run: |
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== services ==='; systemctl is-active ecom-api ecom-admin nginx || true"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== ports ==='; ss -ltnp 2>/dev/null | egrep ':80 |:443 |:3000 |:3001 |:4000 ' || true"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== admin HEAD / (expect 200/307) ==='; curl -ksS -I https://admin.jeeey.com | sed -n 1,15p || true"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== api health ==='; curl -ksS -i https://api.jeeey.com/health | sed -n 1,15p || true"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== login attempt to API (expect Set-Cookie auth_token) ==='; curl -ksS -D - -o /dev/null -X POST -H 'content-type: application/x-www-form-urlencoded' --data-urlencode email=admin@example.com --data-urlencode password=admin123 https://api.jeeey.com/api/admin/auth/login | sed -n 1,60p || true"

      - name: API login JSON + fallback create-admin (local) + cookie check
        env:
          GHA_DB_URL: ${{ secrets.DATABASE_URL }}
          GHA_DIRECT_URL: ${{ secrets.DIRECT_URL }}
        run: |
          set -e
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 bash -s <<CHECK
          set -e
          ROOT=/var/www/ecom
          # Ensure .env.api exists - created earlier in workflow; if still missing, skip gracefully
          if [ ! -s "$ROOT/.env.api" ]; then echo '.env.api missing; skipping login bootstrap.'; exit 0; fi
          # If DATABASE_URL missing, skip login/bootstrap (API cannot work without DB)
          if ! grep -q '^DATABASE_URL=' "$ROOT/.env.api"; then echo 'DATABASE_URL missing in .env.api; skipping login bootstrap.'; exit 0; fi
          echo '--- JSON login (local API) ---'
          JSON_STATUS=$(curl -s -o /dev/null -w '%{http_code}' -X POST http://127.0.0.1:4000/api/admin/auth/login -H 'content-type: application/json' --data '{"email":"admin@example.com","password":"admin123","remember":true}')
          echo "json status: $JSON_STATUS"
          if [ "$JSON_STATUS" != "200" ]; then
            echo 'Admin login failed, attempting maintenance create-admin (local)...'
            . "$ROOT/.env.api" || true
            curl -s -X POST http://127.0.0.1:4000/api/admin/maintenance/create-admin -H "x-maintenance-secret: ${MAINTENANCE_SECRET:-}" -H 'content-type: application/json' --data '{"email":"admin@example.com","password":"admin123","name":"Admin"}' || true
            sleep 1
            JSON_STATUS=$(curl -s -o /dev/null -w '%{http_code}' -X POST http://127.0.0.1:4000/api/admin/auth/login -H 'content-type: application/json' --data '{"email":"admin@example.com","password":"admin123","remember":true}')
            echo "json status (retry): $JSON_STATUS"
            [ "$JSON_STATUS" = "200" ] || (echo "JSON login still failing ($JSON_STATUS)"; exit 1)
          fi
          echo '--- Form login (external) header check ---'
          set +e
          HEADERS=$(curl -ksS -D - -o /dev/null -X POST https://api.jeeey.com/api/admin/auth/login -H 'content-type: application/x-www-form-urlencoded' --data 'email=admin@example.com&password=admin123&remember=true')
          printf '%s\n' "$HEADERS" | sed -n '1,30p'
          printf '%s\n' "$HEADERS" | grep -iq '^set-cookie: .*auth_token=' && echo 'auth_token cookie issued (form)' || echo 'warning: no auth_token Set-Cookie observed (form)'
          set -e
          CHECK

      - name: Upload deployment logs (debug)
        if: always()
        run: |
          echo "No local logs; remote checks printed above."

