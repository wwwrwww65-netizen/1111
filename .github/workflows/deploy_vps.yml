name: deploy_vps

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: deploy_vps-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Prime known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H 72.60.92.17 >> ~/.ssh/known_hosts 2>/dev/null

      - name: Rsync repository to VPS (/var/www/ecom)
        run: |
          set +e
          rsync -az --delete --delete-after --omit-dir-times --no-perms --no-owner --no-group \
            --exclude=.git \
            --exclude=node_modules \
            --exclude=.next \
            --exclude=dist \
            --exclude=.pnpm-store \
            --exclude=.cache \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ root@72.60.92.17:/var/www/ecom
          rc=$?
          if [ $rc -ne 0 ] && [ $rc -ne 24 ]; then exit $rc; fi

      - name: Prepare API env file on VPS
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          MAINTENANCE_SECRET: ${{ secrets.MAINTENANCE_SECRET }}
        run: |
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "bash -lc 'set -e; mkdir -p /var/www/ecom; f=/var/www/ecom/.env.api; : > "$f"; \
            [ -n "${DATABASE_URL}" ] && printf "DATABASE_URL=%s\n" "${DATABASE_URL}" >> "$f"; \
            [ -n "${DIRECT_URL}" ] && printf "DIRECT_URL=%s\n" "${DIRECT_URL}" >> "$f"; \
            if [ -n "${JWT_SECRET}" ]; then printf "JWT_SECRET=%s\n" "${JWT_SECRET}" >> "$f"; else printf "JWT_SECRET=%s\n" "$(openssl rand -hex 32 || cat /proc/sys/kernel/random/uuid)" >> "$f"; fi; \
            if [ -n "${MAINTENANCE_SECRET}" ]; then printf "MAINTENANCE_SECRET=%s\n" "${MAINTENANCE_SECRET}" >> "$f"; else printf "MAINTENANCE_SECRET=%s\n" "deploy-$(date +%s)" >> "$f"; fi; \
            chown root:root "$f"; chmod 600 "$f"'"

      - name: Build and restart services on VPS
        run: |
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 'bash -lc '\''
            set -e
            export PRISMA_IGNORE_ENV_CONFLICT=1
            export NEXT_CACHE_DISABLED=1
            export TURBO_FORCE=1
            export PATH="/usr/local/bin:/usr/bin:$PATH"
            cd /var/www/ecom
            corepack enable || true
            corepack prepare pnpm@9.15.9 --activate || corepack prepare pnpm@9 --activate || true
            pnpm -v || npm i -g pnpm@9
            # Install deps (include dev for builds)
            CI=1 NODE_ENV=development pnpm install --frozen-lockfile=false --prod=false --force | cat
            # Build packages
            export NODE_ENV=production
            pnpm --filter @repo/db build | cat
            rm -rf apps/admin/.next apps/web/.next || true
            pnpm --filter admin build | cat
            pnpm --filter web build | cat
            pnpm --filter @repo/api build | cat
            # Prepare standalone
            if [ -d apps/admin/.next/standalone ]; then cp -r apps/admin/public apps/admin/.next/standalone/ 2>/dev/null || true; fi
            if [ -d apps/web/.next/standalone ]; then cp -r apps/web/public apps/web/.next/standalone/ 2>/dev/null || true; fi
            # Update systemd units
            install -m 0644 -T infra/systemd/ecom-admin.service /etc/systemd/system/ecom-admin.service
            install -m 0644 -T infra/systemd/ecom-api.service /etc/systemd/system/ecom-api.service
            systemctl daemon-reload
            systemctl restart ecom-api || true
            systemctl restart ecom-admin || true
            # Nginx canonical HTTP->HTTPS redirects
            install -m 0644 -T infra/deploy/nginx/jeeey.conf /etc/nginx/sites-available/jeeey.conf
            ln -sf /etc/nginx/sites-available/jeeey.conf /etc/nginx/sites-enabled/jeeey.conf
            rm -f /etc/nginx/sites-enabled/default /etc/nginx/conf.d/default.conf || true
            nginx -t
            systemctl reload nginx
          '\'''

      - name: Bootstrap RBAC and Admin user
        run: |
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "bash -lc 'set -e; \
            MSEC=$(grep -s '^MAINTENANCE_SECRET=' /var/www/ecom/.env.api | cut -d= -f2-); \
            curl -s -i -X POST -H \"x-maintenance-secret: ${MSEC}\" https://api.jeeey.com/api/admin/maintenance/ensure-rbac | sed -n 1,10p || true; \
            curl -s -i -X POST -H \"x-maintenance-secret: ${MSEC}\" -H \"content-type: application/json\" --data '{\"email\":\"admin@example.com\",\"password\":\"admin123\",\"name\":\"Admin\"}' https://api.jeeey.com/api/admin/maintenance/create-admin | sed -n 1,12p || true'"

      - name: Verify deployment (services, ports, endpoints)
        run: |
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== services ==='; systemctl is-active ecom-api ecom-admin nginx || true"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== ports ==='; ss -ltnp 2>/dev/null | egrep ':80 |:443 |:3000 |:3001 |:4000 ' || true"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== nginx conflicts (should be empty warnings) ==='; nginx -T 2>/dev/null | grep -En 'server_name\s+.*jeeey\.com' | sed -n 1,200p || true"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== admin HEAD / (expect 200/307) ==='; curl -s -I https://admin.jeeey.com | sed -n 1,15p || true"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== api health ==='; curl -s -i https://api.jeeey.com/health | sed -n 1,15p || true"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== login attempt to API (may 200/401) ==='; curl -s -i -X POST -H 'content-type: application/x-www-form-urlencoded' --data-urlencode email=admin@example.com --data-urlencode password=admin123 https://api.jeeey.com/api/admin/auth/login | sed -n 1,20p || true"

      - name: Upload deployment logs (debug)
        if: always()
        run: |
          echo "No local logs; remote checks printed above."

