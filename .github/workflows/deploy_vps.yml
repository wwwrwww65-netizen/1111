name: deploy_vps

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: deploy_vps-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Prime known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H 72.60.92.17 >> ~/.ssh/known_hosts 2>/dev/null

      - name: Rsync repository to VPS (/var/www/ecom)
        run: |
          set +e
          rsync -az --delete --delete-after --omit-dir-times --no-perms --no-owner --no-group \
            --exclude=.git \
            --exclude=node_modules \
            --exclude=.next \
            --exclude=dist \
            --exclude=.pnpm-store \
            --exclude=.cache \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ root@72.60.92.17:/var/www/ecom
          rc=$?
          if [ $rc -ne 0 ] && [ $rc -ne 24 ]; then exit $rc; fi

      - name: Prepare API env file on VPS (preserve JWT/MAINTENANCE)
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
        run: |
          set -e
          tmpfile=$(mktemp)
          : > "$tmpfile"
          [ -n "${DATABASE_URL}" ] && echo "DATABASE_URL=${DATABASE_URL}" >> "$tmpfile"
          [ -n "${DIRECT_URL}" ] && echo "DIRECT_URL=${DIRECT_URL}" >> "$tmpfile"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "mkdir -p /var/www/ecom"
          scp -o StrictHostKeyChecking=no "$tmpfile" root@72.60.92.17:/var/www/ecom/.env.api.tmp
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 bash -s <<'EOF'
          set -e
          F=/var/www/ecom/.env.api
          T=/var/www/ecom/.env.api.tmp
          touch "$F"; touch "$T"
          J=$(grep -s '^JWT_SECRET=' "$F" | head -n1)
          M=$(grep -s '^MAINTENANCE_SECRET=' "$F" | head -n1)
          if [ -z "$J" ]; then J="JWT_SECRET=$(openssl rand -hex 32 || cat /proc/sys/kernel/random/uuid)"; fi
          if [ -z "$M" ]; then M="MAINTENANCE_SECRET=deploy-$(date +%s)"; fi
          {
            [ -n "$J" ] && echo "$J"
            [ -n "$M" ] && echo "$M"
            grep -vE '^(JWT_SECRET|MAINTENANCE_SECRET)=' "$T" || true
          } > /var/www/ecom/.env.api.new
          mv /var/www/ecom/.env.api.new "$F"
          rm -f "$T"
          chown root:root "$F"; chmod 600 "$F"
          EOF

      - name: Build and restart services on VPS
        run: |
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 'bash -lc '\''
            set -e
            export PRISMA_IGNORE_ENV_CONFLICT=1
            export NEXT_CACHE_DISABLED=1
            export TURBO_FORCE=1
            export PATH="/usr/local/bin:/usr/bin:$PATH"
            cd /var/www/ecom
            corepack enable || true
            corepack prepare pnpm@9.15.9 --activate || corepack prepare pnpm@9 --activate || true
            pnpm -v || npm i -g pnpm@9
            # Install deps (include dev for builds)
            CI=1 NODE_ENV=development pnpm install --frozen-lockfile=false --prod=false --force | cat
            # Build packages
            export NODE_ENV=production
            pnpm --filter @repo/db build | cat
            rm -rf apps/admin/.next apps/web/.next || true
            pnpm --filter admin build | cat
            pnpm --filter web build | cat
            pnpm --filter @repo/api build | cat
            # Prepare standalone: ensure Next.js static/public symlinks exist before restart
            if [ -d apps/admin/.next ]; then 
              A=apps/admin/.next; S=apps/admin/.next/standalone/apps/admin/.next; 
              mkdir -p "$S"; 
              if [ -d "$A/static" ]; then ln -sfn "$(readlink -f "$A/static")" "$S/static"; fi
              ln -sfn "$(readlink -f apps/admin/public)" apps/admin/.next/standalone/public || true
            fi
            if [ -d apps/web/.next ]; then 
              W=apps/web/.next; SW=apps/web/.next/standalone/apps/web/.next; 
              mkdir -p "$SW"; 
              if [ -d "$W/static" ]; then ln -sfn "$(readlink -f "$W/static")" "$SW/static"; fi
              ln -sfn "$(readlink -f apps/web/public)" apps/web/.next/standalone/public || true
            fi
            # Update systemd units
            install -m 0644 -T infra/systemd/ecom-admin.service /etc/systemd/system/ecom-admin.service
            install -m 0644 -T infra/systemd/ecom-api.service /etc/systemd/system/ecom-api.service
            install -m 0644 -T infra/systemd/ecom-web.service /etc/systemd/system/ecom-web.service
            systemctl daemon-reload
            systemctl restart ecom-api || (systemctl reset-failed ecom-api && systemctl start ecom-api) || true
            systemctl restart ecom-admin || (systemctl reset-failed ecom-admin && systemctl start ecom-admin) || true
            systemctl restart ecom-web || (systemctl reset-failed ecom-web && systemctl start ecom-web) || true
            # Nginx canonical HTTP->HTTPS redirects
            install -m 0644 -T infra/deploy/nginx/jeeey.conf /etc/nginx/sites-available/jeeey.conf
            ln -sf /etc/nginx/sites-available/jeeey.conf /etc/nginx/sites-enabled/jeeey.conf
            rm -f /etc/nginx/sites-enabled/default /etc/nginx/conf.d/default.conf || true
            nginx -t
            systemctl reload nginx
          '\'''

      - name: Bootstrap RBAC and Admin user
        run: |
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 bash -s <<'EOF'
          set -e
          MSEC=$(grep -s '^MAINTENANCE_SECRET=' /var/www/ecom/.env.api | cut -d= -f2- || true)
          [ -z "$MSEC" ] && MSEC="deploy-$(date +%s)" && echo "MAINTENANCE_SECRET=$MSEC" >> /var/www/ecom/.env.api
          curl -s -i -X POST -H "x-maintenance-secret: ${MSEC}" https://api.jeeey.com/api/admin/maintenance/ensure-rbac | sed -n 1,10p || true
          curl -s -i -X POST -H "x-maintenance-secret: ${MSEC}" -H 'content-type: application/json' --data '{"email":"admin@example.com","password":"admin123","name":"Admin"}' https://api.jeeey.com/api/admin/maintenance/create-admin | sed -n 1,12p || true
          EOF

      - name: Verify deployment (services, ports, endpoints)
        run: |
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== services ==='; systemctl is-active ecom-api ecom-admin nginx || true"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== ports ==='; ss -ltnp 2>/dev/null | egrep ':80 |:443 |:3000 |:3001 |:4000 ' || true"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== nginx conflicts (should be empty warnings) ==='; nginx -T 2>/dev/null | grep -En 'server_name\s+.*jeeey\.com' | sed -n 1,200p || true"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== admin HEAD / (expect 200/307) ==='; curl -s -I https://admin.jeeey.com | sed -n 1,15p || true"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== api health ==='; curl -s -i https://api.jeeey.com/health | sed -n 1,15p || true"
          ssh -o StrictHostKeyChecking=no root@72.60.92.17 "echo '=== login attempt to API (expect Set-Cookie auth_token) ==='; curl -s -D - -o /dev/null -X POST -H 'content-type: application/x-www-form-urlencoded' --data-urlencode email=admin@example.com --data-urlencode password=admin123 https://api.jeeey.com/api/admin/auth/login | sed -n 1,60p || true"

      - name: Upload deployment logs (debug)
        if: always()
        run: |
          echo "No local logs; remote checks printed above."

