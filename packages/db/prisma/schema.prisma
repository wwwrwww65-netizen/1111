// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum CouponType {
  PERCENTAGE
  FIXED
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  name              String
  role              UserRole  @default(USER)
  phone             String?
  isVerified        Boolean   @default(false)
  twoFactorEnabled  Boolean   @default(false)
  twoFactorSecret   String?
  stripeCustomerId  String?   @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  addresses         Address[]
  orders            Order[]
  reviews           Review[]
  cart              Cart?
  wishlist          WishlistItem[]
  userRoles         UserRoleLink[]
  auditLogs         AuditLog[]
  couponUsage       CouponUsage[]
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String
  price         Float
  images        String[]
  categoryId    String
  stockQuantity Int      @default(0)
  isActive      Boolean  @default(true)
  sku           String?  @unique
  weight        Float?
  dimensions    String?
  brand         String?
  tags          String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  category      Category     @relation(fields: [categoryId], references: [id])
  variants      ProductVariant[]
  reviews       Review[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
}

model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  name      String   // e.g., "Red", "Large"
  value     String   // e.g., "red", "L"
  price     Float?
  purchasePrice Float?
  stockQuantity Int  @default(0)
  sku       String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Address {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders      Order[]  @relation("OrderShippingAddress")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id                String      @id @default(cuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  status            OrderStatus @default(PENDING)
  total             Float
  shippingAddressId String?
  shippingAddress   Address?    @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  trackingNumber    String?
  couponId          String?
  discountAmount    Float       @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  payment           Payment?
  items             OrderItem[]
  coupon            Coupon?     @relation(fields: [couponId], references: [id])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Payment {
  id        String        @id @default(cuid())
  orderId   String        @unique
  order     Order         @relation(fields: [orderId], references: [id])
  amount    Float
  currency  String        @default("USD")
  method    PaymentMethod
  status    PaymentStatus @default(PENDING)
  stripeId  String?       @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
}

model Coupon {
  id             String     @id @default(cuid())
  code           String     @unique
  discountType   CouponType
  discountValue  Float
  minOrderAmount Float?
  maxUses        Int?
  currentUses    Int        @default(0)
  validFrom      DateTime
  validUntil     DateTime
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  orders         Order[]
  usage          CouponUsage[]
}

model CouponUsage {
  id        String   @id @default(cuid())
  couponId  String
  userId    String
  orderId   String
  usedAt    DateTime @default(now())

  // Relations
  coupon    Coupon   @relation(fields: [couponId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([couponId, userId, orderId])
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

// RBAC & Audit
 

// Customer Support
model SupportTicket {
  id        String   @id @default(cuid())
  userId    String?
  subject   String
  status    String   @default("OPEN")
  priority  String   @default("NORMAL")
  messages  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// Returns & Refunds
model ReturnRequest {
  id           String   @id @default(cuid())
  orderId      String
  status       String   @default("REQUESTED")
  reason       String?
  refundAmount Float?
  createdAt    DateTime @default(now())
}

// Loyalty
model LoyaltyPoint {
  id        String   @id @default(cuid())
  userId    String
  points    Int
  reason    String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// CMS
model CMSPage {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  content   String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Vendors
model Vendor {
  id           String   @id @default(cuid())
  name         String   @unique
  contactEmail String?
  phone        String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Media Library
model MediaAsset {
  id        String   @id @default(cuid())
  url       String
  type      String
  alt       String?
  createdAt DateTime @default(now())
}

// Integrations
model Integration {
  id        String   @id @default(cuid())
  provider  String
  config    Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

// System Settings
model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Events for Recommendations & Trends
model Event {
  id        String   @id @default(cuid())
  userId    String?
  name      String
  properties Json?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// Backups
model BackupJob {
  id        String   @id @default(cuid())
  status    String   @default("PENDING")
  location  String?
  createdAt DateTime @default(now())
}

// RBAC & Audit
model Role {
  id          String         @id @default(cuid())
  name        String         @unique
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  users       UserRoleLink[]
  permissions RolePermission[]
}

model Permission {
  id          String           @id @default(cuid())
  key         String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]
}

model UserRoleLink {
  id     String @id @default(cuid())
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  @@unique([userId, roleId])
}

model RolePermission {
  id           String      @id @default(cuid())
  roleId       String
  permissionId String
  role         Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  @@unique([roleId, permissionId])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  module    String
  details   Json?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}
