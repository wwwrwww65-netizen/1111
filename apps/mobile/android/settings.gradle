pluginManagement {
  def includeIfExists = { File dir -> if (dir != null && dir.exists()) { includeBuild(dir.absolutePath) } }

  // Try typical node_modules locations
  def rnCandidates = [
    new File(rootDir, "../node_modules/@react-native/gradle-plugin"),
    new File(rootDir, "../../node_modules/@react-native/gradle-plugin"),
    new File(rootDir, "../../../node_modules/@react-native/gradle-plugin"),
  ]
  rnCandidates.each { includeIfExists(it) }

  // Try pnpm virtual store layout for RN Gradle plugin
  def pnpmStore = new File(rootDir, "../node_modules/.pnpm")
  if (pnpmStore.exists() && pnpmStore.isDirectory()) {
    pnpmStore.listFiles(new FilenameFilter() {
      boolean accept(File dir, String name) { name.startsWith("@react-native+gradle-plugin@") }
    })?.each { pkgDir ->
      includeIfExists(new File(pkgDir, "node_modules/@react-native/gradle-plugin"))
    }
  }

  // Expo autolinking plugin candidates
  def expoCandidates = [
    new File(rootDir, "../node_modules/expo-modules-autolinking/android/expo-gradle-plugin"),
    new File(rootDir, "../../node_modules/expo-modules-autolinking/android/expo-gradle-plugin"),
    new File(rootDir, "../../../node_modules/expo-modules-autolinking/android/expo-gradle-plugin"),
  ]
  expoCandidates.each { includeIfExists(it) }
}

plugins {
  id("com.facebook.react.settings") version "0.74.0"
  id("expo-autolinking-settings")
}

extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
  if (System.getenv('EXPO_USE_COMMUNITY_AUTOLINKING') == '1') {
    ex.autolinkLibrariesFromCommand()
  } else {
    ex.autolinkLibrariesFromCommand(expoAutolinking.rnConfigCommand)
  }
}
expoAutolinking.useExpoModules()

rootProject.name = 'E-commerce Mobile App'

expoAutolinking.useExpoVersionCatalog()

include ':app'
// Also include RN gradle plugin discovered by expoAutolinking, if available
if (expoAutolinking.reactNativeGradlePlugin != null) { includeBuild(expoAutolinking.reactNativeGradlePlugin) }
